<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TimRayburn.net]]></title>
  <link href="http://TimRayburn.net/atom.xml" rel="self"/>
  <link href="http://TimRayburn.net/"/>
  <updated>2013-07-01T14:02:29-05:00</updated>
  <id>http://TimRayburn.net/</id>
  <author>
    <name><![CDATA[Tim Rayburn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Signup for July #FFFGN]]></title>
    <link href="http://TimRayburn.net/blog/signup-for-july-number-fffgn/"/>
    <updated>2013-07-01T13:55:00-05:00</updated>
    <id>http://TimRayburn.net/blog/signup-for-july-number-fffgn</id>
    <content type="html"><![CDATA[<p>I&#8217;m pleased to report that our first Fourth Friday Family Game Night (#FFFGN) was an incredible success.  We had over 30 players, playing an assortment of games from Phase 10 to Dominion to Ticket to Ride Europe, and more.</p>

<p>We&#8217;ve opened sign ups for our next event, which will be July 26th, starting at 6pm until we get tired and go home.  You can signup at:</p>

<h1><a href="http://fffgn.eventbrite.com">fffgn.eventbrite.com</a></h1>

<p>We look forward to seeing even more of you at the July gathering.  Again, in case you&#8217;re not familiar with the event, <a href="http://TimRayburn.net/fffgn">you can find the details here</a>, but it is open to ANYONE.  This last month we had someone show up who had just met an attendee in their apartment parking lot when they saw them carrying out a copy of Dominion. ANYONE is invited.</p>

<h1><a href="http://TimRayburn.net/fffgn">What is FFFGN?</a></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fourth Friday Family Game Night]]></title>
    <link href="http://TimRayburn.net/blog/fourth-friday-family-game-night/"/>
    <updated>2013-06-21T15:54:00-05:00</updated>
    <id>http://TimRayburn.net/blog/fourth-friday-family-game-night</id>
    <content type="html"><![CDATA[<p>You are officially invited to join the consultants of Improving Enterprises for board games, fun and frivolity.  Every 4th Friday of the month we will gather for a family friendly night of games.  We&#8217;ll have drinks of all sorts available, and a large selection of games.</p>

<h2>Who is invited?</h2>

<p>Everyone, regardless of age or skill.  Bring yourself, your kids, we&#8217;ve got games for all ages.  <strong>We ask that you sign up, if possible</strong>, in advance just to give us an idea of how many people are coming.  <a href="http://fffgn.eventbrite.com">Our registration site is located at this link.</a></p>

<h2>When is it?</h2>

<p>The Fourth Friday of every month, hence the name.  We&#8217;ll officially start at 6:00pm, and run until &#8230; well we&#8217;ll play alot of games.  Leave when you&#8217;d like.</p>

<h2>Where is it?</h2>

<p>We&#8217;re hosted at <a href="http://improvingenterprises.com">Improving Enterprises</a>, a fantastic company in the North Dallas area.  Their offices are at:</p>

<p><a href="https://maps.google.com/maps?q=16633+Dallas+Parkway+Suite+100+Addison,+TX+75001&amp;hl=en&amp;sll=31.168934,-100.076842&amp;sspn=18.524051,54.118652&amp;t=h&amp;hnear=16633+Dallas+Pkwy+%23100,+Addison,+Dallas,+Texas+75001&amp;z=17">16633 Dallas Parkway
Suite 100
Addison, TX 75001</a></p>

<h2>What games will you be playing?</h2>

<p>Pretty much everything.  If you&#8217;re idea of a board game is the traditional American board games of Monopoly or Risk, then we&#8217;ve got you covered.</p>

<p>On the other hand, if you&#8217;re a fan of Euro-style board games, then we&#8217;ve got people who would love to play a game of Dominion, Settlers of Catan, Small World, Agricola, or anything else you&#8217;d like to bring.</p>

<p>Are you an huge name on <a href="http://www.boardgamegeek.com/">Board Game Geek</a>?  Bring your favorite game and teach us how to play!</p>

<h2>I don&#8217;t know any of those games!</h2>

<p>Great!  We love to teach people how to play.</p>

<h2>I&#8217;ve got questions still&#8230;</h2>

<p>Contact one of our official Hosts, they&#8217;ll be more than happy to field any questions you might have:</p>

<p><a href="http://TimRayburn.net">Tim Rayburn</a> can be reached at tim@timrayburn.net or 817-760-0002</p>

<p><a href="http://tycrockett.com">Ty Crockett</a> can be reached at ty.crockett@improvingenterprises.com</p>

<h2>Sponsors</h2>

<p>This event is graciously hosted by the incredible folks at <a href="http://improvingenterprises.com">Improving Enterprises</a>.  They open their offices, soda fridge, and other facilities to us on a monthly basis and we&#8217;re thrilled to have their support.  If you&#8217;re an IT professional, please chat with on of their employees who attend to learn more about this great company.</p>

<p><img src="http://timrayburn.net/images/ie-logo-small.jpg" alt="Improving Enterprises Logo" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides and Code from Dallas XAML GIT Workshop]]></title>
    <link href="http://TimRayburn.net/blog/slides-and-code-from-dallas-xaml-git-workshop/"/>
    <updated>2013-06-05T06:37:00-05:00</updated>
    <id>http://TimRayburn.net/blog/slides-and-code-from-dallas-xaml-git-workshop</id>
    <content type="html"><![CDATA[<p>For those who attended my GIT Workship last night at Dallas XAML, you can find the code and slides here: <a href="https://github.com/trayburn/Presentation-GitWorkshop">https://github.com/trayburn/Presentation-GitWorkshop</a></p>

<p>I&#8217;ve fixed the problems with my demo scripts that create repositories, so you can clone that repository locally and execute :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.\LocalDevelopment.ps1</span></code></pre></td></tr></table></div></figure>


<p>For a basic repository example which you can use to practice roll-backs, etc.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.\BranchingDemo.ps1</span></code></pre></td></tr></table></div></figure>


<p>This will create three branches from master, which you can practice merging, and rebase&#8217;ing with.</p>

<p>Thanks to those that attended, I hope you got something useful out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highway.Onramp.Services Quickstart Guide]]></title>
    <link href="http://TimRayburn.net/blog/highway-dot-onramp-dot-services-quickstart-guide/"/>
    <updated>2013-05-28T06:43:00-05:00</updated>
    <id>http://TimRayburn.net/blog/highway-dot-onramp-dot-services-quickstart-guide</id>
    <content type="html"><![CDATA[<p>Highway.Onramp.Services is part of the <a href="http://timrayburn.net/blog/introducing-highway-onramps/">Onramp series of NuGet packages</a> which all focus on providing you robust starting solutions for common team needs.  They let you skip over all that required plumbing friction, and jump straight into writing code which produces real business value.</p>

<p>Now, we can&#8217;t do that without making some very important decisions for you.  That&#8217;s why as part of this we&#8217;ve also produced Highway Onramper, which lets you create your own version of these Onramps with your own technology decisions made.  For this post we&#8217;re just introducing our version, and in a future post we&#8217;ll teach you how to make an Onramp of your own.</p>

<h2>1, 2, 3 Running Service</h2>

<p>So let&#8217;s create a Windows Service, that we can actually debug, and install/uninstall, shall we?</p>

<ul>
<li>Start Visual Studio and create a Console Application in C#.  When you&#8217;re done, the Program.cs should look like the default:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Program
</span><span class='line'>{
</span><span class='line'>    static void Main(string[] args)
</span><span class='line'>    {
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Open the Package Manager Console, and type:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PM&gt; Install-Package Highway.Onramp.Services</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Note: You will be prompted for permission to overwrite your Program.cs, go ahead and give permission, after all there is no useful code in that class yet.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File Conflict
</span><span class='line'>File 'Program.cs' already exists in project 'ConsoleApplication4'. Do you want to overwrite it?
</span><span class='line'>[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [?] Help (default is "N"):Y
</span><span class='line'>Overwrite existing file 'Program.cs'.
</span><span class='line'>Successfully added 'Highway.Onramp.Services 2.0.4.0' to ConsoleApplication4.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Press F5 and run your new, fully functional, Windows Service.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO&gt; Configuration Result:
</span><span class='line'>[Success] Name MyService
</span><span class='line'>[Success] DisplayName My Services Long Description
</span><span class='line'>[Success] Description My Services Long Description
</span><span class='line'>[Success] ServiceName MyService
</span><span class='line'>INFO&gt; Topshelf v3.1.107.0, .NET Framework v4.0.30319.18046
</span><span class='line'>INFO&gt; The MyService service is now running, press Control+C to exit.
</span><span class='line'>INFO&gt; Tick Tock goes the clock
</span><span class='line'>INFO&gt; Tick Tock goes the clock
</span><span class='line'>INFO&gt; Tick Tock goes the clock
</span><span class='line'>INFO&gt; Tick Tock goes the clock</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it, your service is up and running, and can be debugged.  But what decisions did we just make for you?</p>

<h2>Straight to Value</h2>

<p>So before we explain how this all works, if you just want to get down to coding, then have at it.  The file you want to modify is <code>Services.cs</code> and you can change everything about that class you want to <strong>EXCEPT</strong> that it implements the <code>IHostedService</code> interface.  That is how our framework code tells your code when to Start and Stop.</p>

<p>As you can see, the default we&#8217;ve provided uses a simple Timer to write to the console.  But you can wire in anything you want at this point.</p>

<h2>The Architecture</h2>

<h3>TopShelf</h3>

<p>First and foremost, your new service uses the amazing <a href="http://topshelf-project.com/">TopShelf project</a> to turn a simple Console application into a Windows Service.  I encourage you to go and learn more about this project, but the fundamentals are the following:</p>

<ul>
<li>Install the service:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;YourConsoleExecutable&gt;.exe install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Uninstall the service:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;YourConsoleExecutable&gt;.exe uninstall</span></code></pre></td></tr></table></div></figure>


<h3>Castle.Windsor</h3>

<p>We are big believers in Dependency Injection, and so we&#8217;ve included <a href="http://www.castleproject.org/">Castle.Windsor as an Inversion of Control container</a>.  But more than that, we&#8217;ve already setup a the container for the basics for you.  If you go to the new <code>Installers</code> directory in your project, you will see three classes.  All of these inherit from <code>IWindsorInstaller</code> and are invoked when the service starts to configure your container.</p>

<h3>NLog &amp; Castle Logging Facility</h3>

<p>We&#8217;ve implemented the Castle Logging Facility, which is an abstraction over the top of any logger, and then wired that up to <a href="http://nlog-project.org/">NLog</a>.  There is an <code>NLog.config</code> file, and it is already setup to log to a file, and the console, and the debugger at various levels of messages.</p>

<p>By default the console only receives <code>Info</code> level or higher, but the debugger will receive everything.</p>

<h3>Dictionary Adapter</h3>

<p>Also from Castle.Core, we&#8217;ve used Dictionary Adapter to provide a testable abstraction over App Settings.  This is setup in the <code>CastleInstaller.cs</code>, with the following lines of code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Our configuration magic, register all interfaces ending in Config from
</span><span class='line'>// this assembly, and create implementations using DictionaryAdapter
</span><span class='line'>// from the AppSettings in our app.config.
</span><span class='line'>var daf = new DictionaryAdapterFactory();
</span><span class='line'>container.Register(
</span><span class='line'>    Types
</span><span class='line'>        .FromThisAssembly()
</span><span class='line'>        .Where(type =&gt; type.IsInterface && type.Name.EndsWith("Config"))
</span><span class='line'>        .Configure(
</span><span class='line'>            reg =&gt; reg.UsingFactoryMethod(
</span><span class='line'>                (k, m, c) =&gt; daf.GetAdapter(m.Implementation, ConfigurationManager.AppSettings)
</span><span class='line'>                )
</span><span class='line'>        ));</span></code></pre></td></tr></table></div></figure>


<p>This tells Castle to register all <strong>Types from the current assembly</strong> which are <strong>Interfaces</strong> and which have a <strong>name that ends with &#8220;Config&#8221;</strong>.  It then says that when such an interface is resolved, it will use the DictionaryAdapterFactory to create an instance of this interface for you, backed by the AppSettings of your project.  Now, you&#8217;re probably not familiar with DictionaryAdapter, but if you&#8217;d like to learn more I&#8217;d suggest my two <a href="http://timrayburn.net/blog/dictionaryadapter-is-love-part-1/">blog</a> <a href="http://timrayburn.net/blog/dictionaryadapter-is-love-part-2/">posts</a> of the subject.</p>

<p>We&#8217;ve included an interface example in the <code>Config</code> folder to show you how this might work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[KeyPrefix("Service.")]
</span><span class='line'>public interface IServiceConfig
</span><span class='line'>{
</span><span class='line'>    string LongName { get; set; }
</span><span class='line'>    string ShortName { get; set; }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If you take this interface as a dependency, you can invoke the LongName, or ShortName, properties and you will receive the values from your <code>app.config</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;appSettings&gt;
</span><span class='line'>  &lt;add key="Service.LongName" value="My Services Long Description" /&gt;
</span><span class='line'>  &lt;add key="Service.ShortName" value="MyService" /&gt;
</span><span class='line'>&lt;/appSettings&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Highway Onramps]]></title>
    <link href="http://TimRayburn.net/blog/introducing-highway-onramps/"/>
    <updated>2013-05-25T20:32:00-05:00</updated>
    <id>http://TimRayburn.net/blog/introducing-highway-onramps</id>
    <content type="html"><![CDATA[<blockquote><p>Don&#8217;t Repeat Yourself
&#8211; The Pragmatic Programmer</p></blockquote>

<p>As part of our efforts in creating the <a href="https://github.com/highwayFramework">Highway Framework</a>, <a href="http://devlinliles.com/">Devlin</a> and I have found that there is a related but not identical other problem we wanted to solve.  <a href="http://nuget.org/packages/Highway.Data/">Highway.Data</a> serves as a library extension to <a href="http://nuget.org/packages/Highway.Data.EntityFramework/">Entity Framework</a>, and other <a href="http://nuget.org/packages?q=Highway.Data">ORMs</a>, but because its a library we didn&#8217;t fill it with a lot of our actual opinions on how to create working solutions.  For instance, it isn&#8217;t bound to just one IoC, or Logging framework, etc.</p>

<p>In our next endeavor, Highway Onramps, we intend to make it possible to quickly kickstart applications with the architecture you&#8217;ve decided on, and we&#8217;ll show you how by letting you take our opinions.  As part of this Onramps project, we are introducing three different projects, and a bunch of <a href="http://nuget.org/">NuGet</a> packages:</p>

<ul>
<li><a href="http://nuget.org/packages/Highway.Onramp.MVC/">Highway.Onramp.MVC</a> is our basic MVC solution, using MVC 4.  Installed into a new project, it will bring in Castle.Windsor and wire-up everything needed for Dependency Injection.</li>
<li><a href="http://nuget.org/packages/Highway.Onramp.MVC.Logging/">Highway.Onramp.MVC.Logging</a> adds Castle&#8217;s Logging Facility support, and wires into unhandled application errors, and logs start and stop events.</li>
<li><a href="http://nuget.org/packages/Highway.Onramp.MVC.Data/">Highway.Onramp.MVC.Data</a> adds support for Highway.Data into the mix.  Registers it with IoC, etc.</li>
<li><a href="http://nuget.org/packages/Highway.Onramp.MVC.All/">Highway.Onramp.MVC.All</a> brings in all of the above.</li>
<li><a href="http://nuget.org/packages/Highway.Onramp.Services/">Highway.Onramp.Services</a> builds on top of the amazing TopShelf project to kickstart a Windows Service from a simple Console application.</li>
<li><a href="http://nuget.org/packages/Highway.Onramp.Services.Data/">Highway.Onramp.Services.Data</a> adds in support for Highway.Data and registers it with a factory for proper lifetime management in a service.</li>
<li>Finally we introduce the most important of them all, <a href="https://github.com/HighwayFramework/Highway.OnRamper">Highway.Onramper</a>.  This project enables you to quickly and easily create projects just like those above, and keep them up to date.</li>
</ul>


<p>The packages for all of these are already uploaded to <a href="http://nuget.org/">NuGet.org</a>, so feel free to dig in, but over the next few days, we&#8217;ll be posting exact details of how to use these packages.</p>

<p>If you&#8217;d like the all-day version of those posts, then come out to <a href="http://tulsaschoolofdev.com/">Tulsa School of Dev</a> where <a href="http://devlinliles.com/">Devlin</a> and I will be running a full track on codifying your architecture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books Every Software Developer Should Read]]></title>
    <link href="http://TimRayburn.net/blog/books-every-software-developer-should-read/"/>
    <updated>2013-05-18T07:30:00-05:00</updated>
    <id>http://TimRayburn.net/blog/books-every-software-developer-should-read</id>
    <content type="html"><![CDATA[<p>Yesterday at AgileDotNet, before one of my sessions, we were discussing books which every software developer should read with the room, and particularly with a bunch of SMU students who came down to Houston to attend.  I promised I would post the list of those books to my blog, so here they are:</p>

<h2>The Must Read List (in Order)</h2>

<ul>
<li><a href="http://www.amazon.com/gp/product/0596008678/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596008678&amp;linkCode=as2&amp;tag=timraybnet-20">Head First Object-Oriented Analysis and Design by Brett Mclaughlin</a></li>
<li><a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=timraybnet-20">Clean Code : A Handbook of Agile Software Craftsmanship  by Robert Martin</a></li>
<li><a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=timraybnet-20">Code Complete: A Practical Handbook of Software Construction, Second Edition by Steve McConnell</a></li>
<li><a href="http://www.amazon.com/gp/product/0321213351/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321213351&amp;linkCode=as2&amp;tag=timraybnet-20">Refactoring to Patterns by Joshua Kerievsky</a></li>
<li><a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0131177052&amp;linkCode=as2&amp;tag=timraybnet-20">Working Effectively with Legacy Code by Michael Feathers</a></li>
<li><a href="http://www.amazon.com/gp/product/0596007124/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596007124&amp;linkCode=as2&amp;tag=timraybnet-20">Head First Design Patterns by Eric Freeman</a></li>
</ul>


<h2>Books You Should Read &amp; Own Eventually</h2>

<ul>
<li><a href="http://www.amazon.com/gp/product/B000SEIBB8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B000SEIBB8&amp;linkCode=as2&amp;tag=timraybnet-20">Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides aka &#8220;The Gang of Four&#8221;</a><br/>
This is the original work which brought about the terminology of Design Patterns.  We recommend the Head First book above over it simply because it&#8217;s examples are in SmallTalk and C++, which means that its showing its age.</li>
<li><a href="http://www.amazon.com/gp/product/0988262592/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0988262592&amp;linkCode=as2&amp;tag=timraybnet-20">The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win by Kevin Behr</a><br/>
This book is a great story about how Operations and Developers can work together, and should be read by most teams trying to tighten their relationship with their operations team.</li>
<li><a href="http://www.amazon.com/gp/product/0321200683/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321200683&amp;linkCode=as2&amp;tag=timraybnet-20">Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions by Bobby Woolf and Gregor Hohpe</a><br/>
This book should be read and used as the bible for any distributed message application you build.  I&#8217;d remind you that these days most websites with APIs really are a distributed application.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell for Developers - DRY]]></title>
    <link href="http://TimRayburn.net/blog/powershell-for-developers-dry/"/>
    <updated>2013-05-12T21:06:00-05:00</updated>
    <id>http://TimRayburn.net/blog/powershell-for-developers-dry</id>
    <content type="html"><![CDATA[<p>DRY is an acronym that was created by <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X&amp;linkCode=as2&amp;tag=timraybnet-20">Andrew Hunt and Dave Thomas in their book The Pragmatic Programmer</a>.  It stands for Don&#8217;t Repeat Yourself.  We&#8217;ve espoused terse commands in all the previous chapters, but how to I avoid having to re-invent the wheel every time I open a PowerShell prompt.</p>

<h2>Profiles</h2>

<p>There is a script which runs every time you open a PowerShell prompt, it&#8217;s called your Profile.  The file name varies depending on your operating system and version, but you can find it quickly by opening a prompt and typing <code>$profile</code> like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $profile
</span><span class='line'>C:\Users\Tim\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</span></code></pre></td></tr></table></div></figure>


<p>Now if you&#8217;ve got a brand new environment, this file may not even exist.  You can test if it does, and then create it if it does not with the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Test-Path $PROFILE
</span><span class='line'>False
</span><span class='line'>&gt; New-Item -path $profile -type file -force
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\Users\Tim\Documents\WindowsPowerShell
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>-a---         5/12/2013   6:09 PM          0 Microsoft.PowerShell_profile.ps1
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&gt; notepad $PROFILE</span></code></pre></td></tr></table></div></figure>


<p>The first command ensures that the you don&#8217;t already have a profile.  If it returns true, the skip the second command.</p>

<p>The second command created the profile, as a file, and uses -force to create any directories required to create the item along the way.  This command will work even if you don&#8217;t have a <code>WindowsPowershell</code> directory in your <code>Documents</code> folder.</p>

<h3>What do I put in a $PROFILE?</h3>

<p>Things you don&#8217;t want to type over and over again, of course.  Don&#8217;t Repeat Yourself (DRY).  Now, in reality you don&#8217;t want your profile to become just a giant function library, we have a concept called Modules for that, which we will discuss in just a minute, but there are some things which belong in your $PROFILE.</p>

<h4>The Prompt</h4>

<p>There is a special function called <code>Prompt</code> which you can define, that controls how what your command prompt looks like.  You may have noticed that during this article I&#8217;ve had a very basic prompt that was just <code>&gt;</code>, but most of you likely have a prompt that looks more like this <code>PS C:\Source&gt;</code>.  There is no trickery, I just wanted to make my prompt minimalist for these articles, so I typed the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; function prompt { "&gt; " }
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>As you can see, instantly my prompt was set to the minimalist version you&#8217;ve seen in all these articles.  How is the default prompt defined?  Let&#8217;s see, shall we?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; (get-item Function:\prompt).Definition
</span><span class='line'>"PS $($executionContext.SessionState.Path.CurrentLocation)$('&gt;' * ($nestedPromptLevel + 1)) "
</span><span class='line'># .Link
</span><span class='line'># http://go.microsoft.com/fwlink/?LinkID=225750
</span><span class='line'># .ExternalHelp System.Management.Automation.dll-help.xml</span></code></pre></td></tr></table></div></figure>


<p>So this prompt is defined as <code>PS</code> followed by the expression <code>$executionContext.SessionState.Path.CurrentLocation</code> which gets the current location of the execution context (aka the directory you&#8217;re in).  Then, it displays one <code>&gt;</code> for every level of <code>$nestedPromptLevel</code>, adding one.  Well if your like most people, you&#8217;ve likely got no idea what the heck <code>$nestedPromptLevel</code> is.  We will discuss it further, but for the most basic idea, there is a command called <code>$Host.EnterNestedPrompt()</code> which creates a new prompt.  Like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; $host.EnterNestedPrompt()
</span><span class='line'>PS C:\Source&gt;&gt; $host.EnterNestedPrompt()
</span><span class='line'>PS C:\Source&gt;&gt;&gt; $host.EnterNestedPrompt()
</span><span class='line'>PS C:\Source&gt;&gt;&gt;&gt; exit
</span><span class='line'>PS C:\Source&gt;&gt;&gt; exit
</span><span class='line'>PS C:\Source&gt;&gt; exit
</span><span class='line'>PS C:\Source&gt;</span></code></pre></td></tr></table></div></figure>


<p>As you can see, each nested level of prompt adds a <code>&gt;</code>, which makes perfect sense given the above <code>prompt</code> function definition.</p>

<h2>Location</h2>

<p>Your current working directory is on display in the prompt at all times, and you know if you want to change that directory, you use <code>cd</code>.  It must be named <code>cd</code>, both DOS and LINUX agree on this, how could it possibly be named something else, right?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; cd Highway
</span><span class='line'>PS C:\Source\Highway&gt; alias cd
</span><span class='line'>
</span><span class='line'>CommandType     Name                                               ModuleName
</span><span class='line'>-----------     ----                                               ----------
</span><span class='line'>Alias           cd -&gt; Set-Location</span></code></pre></td></tr></table></div></figure>


<p>Well, as you can see, in PowerShell, which <code>cd</code> is an alias that exists by default for it, the actual command you&#8217;re execution is <code>Set-Location</code>.  Well, most programs would rightly assume that whatever you can <code>Set-</code> you can also <code>Get-</code>, right?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source\Highway&gt; Get-Location
</span><span class='line'>
</span><span class='line'>Path
</span><span class='line'>----
</span><span class='line'>C:\Source\Highway
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>PS C:\Source\Highway&gt; alias -Definition Get-Location
</span><span class='line'>
</span><span class='line'>CommandType     Name                                               ModuleName
</span><span class='line'>-----------     ----                                               ----------
</span><span class='line'>Alias           gl -&gt; Get-Location
</span><span class='line'>Alias           pwd -&gt; Get-Location</span></code></pre></td></tr></table></div></figure>


<p>Yup, Get-Location returns the current <code>Path</code> we are at.  You can see that we have two aliases defined by default for us, one is just shorthand for Get-Item, and the other is a helper alias for our Linux friends, who use <code>pwd</code> (short for Print Working Directory) to accomplish this same task.</p>

<h3>Time to get pushy</h3>

<p>Now, as it happens, in PowerShell (and Linux, and DOS) there are a couple of commands for working with Location that most people didn&#8217;t learn when they were first struggling through how to work at a command prompt.  These two commands are called <code>pushd</code> and <code>popd</code> in Linux and DOS, but in PowerShell those are, of course, just aliases:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; alias pushd
</span><span class='line'>
</span><span class='line'>CommandType     Name                                               ModuleName
</span><span class='line'>-----------     ----                                               ----------
</span><span class='line'>Alias           pushd -&gt; Push-Location
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>PS C:\Source&gt; alias popd
</span><span class='line'>
</span><span class='line'>CommandType     Name                                               ModuleName
</span><span class='line'>-----------     ----                                               ----------
</span><span class='line'>Alias           popd -&gt; Pop-Location</span></code></pre></td></tr></table></div></figure>


<p>So <code>Push-Location</code> and <code>Pop-Location</code> are commands that let you quickly leave your current location, but then return there very quickly.  Let me demonstrate:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; pushd 'C:\Windows\Microsoft.NET\Framework\v4.0.30319'
</span><span class='line'>PS C:\Windows\Microsoft.NET\Framework\v4.0.30319&gt; pushd 'C:\Program Files'
</span><span class='line'>PS C:\Program Files&gt; pushd 'C:\Program Files (x86)'
</span><span class='line'>PS C:\Program Files (x86)&gt; pushd 'C:\Users\Tim\Documents\WindowsPowerShell'
</span><span class='line'>PS C:\Users\Tim\Documents\WindowsPowerShell&gt; popd
</span><span class='line'>PS C:\Program Files (x86)&gt; popd
</span><span class='line'>PS C:\Program Files&gt; popd
</span><span class='line'>PS C:\Windows\Microsoft.NET\Framework\v4.0.30319&gt; popd
</span><span class='line'>PS C:\Source&gt; popd
</span><span class='line'>PS C:\Source&gt; popd
</span><span class='line'>PS C:\Source&gt;</span></code></pre></td></tr></table></div></figure>


<p>So initially, <code>pushd</code> would appear to just be a longer version of <code>cd</code>, it moves our current working directory to whichever directory we name.  But, when we then invoke <code>popd</code> the magical nature becomes clear.  When we invoke <code>pushd</code> it changes our directory, but puts the directory we&#8217;re leaving on a stack of remembered directories.  <a href="http://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29">A stack, hence push and pop.</a></p>

<p>As we pop the locations back off the stack, we are transported back to that location as our current working directory.  Pretty darn useful if you need to move from one path to another and back very quickly.</p>

<h3>PSDrive</h3>

<p>Now, Location is all well and good, but that described where you are a given drive.  My default drive, and likely yours, is <code>C:</code> aka the C-Drive.  From time immemorial this has been the default hard drive letter in Windows. <code>A:</code> and <code>B:</code> were reserved for Floppy drives.  Hard drives started at the letter C and incremented from there.  But, that has been simply default for a long time now.</p>

<p>In PowerShell, I can still use <code>C:</code> and <code>D:</code> to move between drives.  This next set of commands will only work if you have two drives (or an SSD and a <a href="http://www.amazon.com/gp/product/B00AK31M3G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00AK31M3G&amp;linkCode=as2&amp;tag=timraybnet-20">Flash card</a> as I&#8217;m using on my <a href="http://www.amazon.com/gp/product/B00BE5T2TA/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00BE5T2TA&amp;linkCode=as2&amp;tag=timraybnet-20">Microsoft Surface Pro</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; d:
</span><span class='line'>PS D:\&gt; dir
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: D:\
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>d----         5/11/2013   2:17 PM            iTunes
</span><span class='line'>d----         5/11/2013   2:27 PM            iTunes Library
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>PS D:\&gt; c:
</span><span class='line'>PS C:\Source&gt; dir
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\Source
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>d----          5/7/2013   1:57 PM            Blog
</span><span class='line'>d----          5/9/2013   7:06 PM            Highway
</span><span class='line'>d----         5/11/2013   4:17 PM            Node
</span><span class='line'>d----          5/5/2013   5:13 PM            PowerShell
</span><span class='line'>d----         4/11/2013  11:58 PM            Presentation-EasyESB
</span><span class='line'>d----         5/10/2013   7:55 PM            RrynVsPS
</span><span class='line'>d----         4/20/2013   1:53 PM            SynTask</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the commands move me between those two drives.  But in reality, the concept of a <em>drive</em> has been much expanded in PowerShell.</p>

<blockquote><p>If it has hierarchy (aka Locations) you want to Navigate, or items you want to inspect, then in PowerShell someone will likely have made it a drive.</p></blockquote>

<p>There is a command in PowerShell that lists all current drives:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; Get-PSDrive
</span><span class='line'>
</span><span class='line'>Name           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation
</span><span class='line'>----           ---------     --------- --------      ----                                               ---------------
</span><span class='line'>Alias                                  Alias
</span><span class='line'>C                  78.10         32.42 FileSystem    C:\                                                         Source
</span><span class='line'>Cert                                   Certificate   \
</span><span class='line'>D                   3.29         56.16 FileSystem    D:\
</span><span class='line'>E                                      FileSystem    E:\
</span><span class='line'>Env                                    Environment
</span><span class='line'>Function                               Function
</span><span class='line'>HKCU                                   Registry      HKEY_CURRENT_USER
</span><span class='line'>HKLM                                   Registry      HKEY_LOCAL_MACHINE
</span><span class='line'>Variable                               Variable
</span><span class='line'>WSMan                                  WSMan</span></code></pre></td></tr></table></div></figure>


<p><strong>blink</strong> <strong>blink</strong> &#8230; Ok, so that is more drives than I was expecting when I first invoked this command.  So what all drives are those, and how do I use them?</p>

<p>Enter <code>Set-Location</code>, aka <code>cd</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS C:\Source&gt; cd alias:
</span><span class='line'>PS Alias:\&gt; ls | select -first 5
</span><span class='line'>
</span><span class='line'>CommandType     Name                                               ModuleName
</span><span class='line'>-----------     ----                                               ----------
</span><span class='line'>Alias           % -&gt; ForEach-Object
</span><span class='line'>Alias           ? -&gt; Where-Object
</span><span class='line'>Alias           ac -&gt; Add-Content
</span><span class='line'>Alias           asnp -&gt; Add-PSSnapin
</span><span class='line'>Alias           cat -&gt; Get-Content</span></code></pre></td></tr></table></div></figure>


<p>Here I&#8217;ve <code>Set-Location</code> to the Alias drive, and listed the first 5 items.  Each PSDrive has different contents depending on what it is representing.  Here&#8217;s a sum-up of the contents of the <strong>default</strong> set of drives:</p>

<ul>
<li>C, D and E drive are File System drives, representing your various mounted drives.  In my case they are my SSD, Flash card, and virtual CD drive.</li>
<li>Cert represents your digital certificate store, both CurrentUser and LocalMachine, which are the two root locations.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS Alias:\&gt; cd Cert:
</span><span class='line'>PS Cert:\&gt; ls | select -first 5
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Location   : CurrentUser
</span><span class='line'>StoreNames : {SmartCardRoot, Root, Trust, AuthRoot...}
</span><span class='line'>
</span><span class='line'>Location   : LocalMachine
</span><span class='line'>StoreNames : {TrustedPublisher, ClientAuthIssuer, Remote Desktop, Root...}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Env represents your Environment Variables, which contains all defined environment variables for your machine.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS Cert:\&gt; cd env:
</span><span class='line'>PS Env:\&gt; ls | select -first 5
</span><span class='line'>
</span><span class='line'>Name                           Value
</span><span class='line'>----                           -----
</span><span class='line'>ALLUSERSPROFILE                C:\ProgramData
</span><span class='line'>APPDATA                        C:\Users\Tim\AppData\Roaming
</span><span class='line'>asl.log                        Destination=file
</span><span class='line'>ChocolateyInstall              C:\Chocolatey
</span><span class='line'>CommonProgramFiles             C:\Program Files\Common Files</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Function represents all functions defined in PowerShell, and in fact is how I showed you the definition of <code>prompt</code> earlier in this chapter (go ahead, look back, I don&#8217;t mind)</li>
<li>HKCU and HKLM represent your register, and specifically the <strong>HKEY_CURRENT_USER</strong> and <strong>HKEY_LOCAL_MACHINE</strong> sections of it.  For instance, want to know all versions of the .NET Framework 4.0 installed on your box?</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS Env:\&gt; ls HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs | %{$_.Name}
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0,Profile=Client
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0.1
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0.1,Profile=Client
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0.2
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0.2,Profile=Client
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0.3
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.0.3,Profile=Client
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.5
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\Client
</span><span class='line'>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\Default</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Variable represents all current variables defined in your scope.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS Env:\&gt; ls Variable:\ | select -first 3
</span><span class='line'>
</span><span class='line'>Name                           Value
</span><span class='line'>----                           -----
</span><span class='line'>$                              Get-PSDrive
</span><span class='line'>?                              True
</span><span class='line'>^                              Get-PSDrive</span></code></pre></td></tr></table></div></figure>


<ul>
<li>WSMan represents the &#8220;Windows Remote Management&#8221; aka WinRM settings.</li>
</ul>


<p>Moreover, these are just the beginning.  Lots of modules, which we are about to discuss, create even more drives.  With the right modules you can browse around Active Directory, SQL Servers, IIS Websites, and so much more.</p>

<h2>Modules Basics</h2>

<p>Modules are a way to expand your available functions, drives, etc in PowerShell, but in an optional manner.  Any given PowerShell environment can load many different Modules, in and adhoc manner.  You can get a list of the current Modules you&#8217;re running as so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Module
</span><span class='line'>
</span><span class='line'>ModuleType Name                                ExportedCommands
</span><span class='line'>---------- ----                                ----------------
</span><span class='line'>Manifest   Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}
</span><span class='line'>Manifest   Microsoft.PowerShell.Security       {ConvertFrom-SecureString, ConvertTo-SecureString, Get-Acl, Get-Authe...
</span><span class='line'>Manifest   Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}
</span><span class='line'>Manifest   Microsoft.WSMan.Management          {Connect-WSMan, Disable-WSManCredSSP, Disconnect-WSMan, Enable-WSManC...
</span><span class='line'>Manifest   pki                                 {Add-CertificateEnrollmentPolicyServer, Export-Certificate, Export-Pf...</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I have four modules loaded at the current time.  But those are just what I have loaded.  What I have available to me is quite another thing.  If you type <code>Get-Module -ListAvailable</code> it will show you all of your possible options, but that output is large.  I&#8217;m going to limit it somewhat here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Module -ListAvailable | select -first 10
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\Users\Tim\Documents\WindowsPowerShell\Modules
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>ModuleType Name                                ExportedCommands
</span><span class='line'>---------- ----                                ----------------
</span><span class='line'>Script     EZOut                               {Add-FormatData, Clear-FormatData, Out-FormatData, Remove-FormatData...}
</span><span class='line'>Script     IsePackV2                           {Add-PowerGUIMenu, Add-IseMenu, Add-Icicle, Clear-Icicle...}
</span><span class='line'>Script     Pester                              {Assert-MockCalled, Assert-VerifiableMocks, Context, Describe...}
</span><span class='line'>Script     Pipeworks                           {Get-FunctionFromScript, Write-PowerShellHashtable, Import-PSData, Ex...
</span><span class='line'>Script     psake                               {Assert, Exec, FormatTaskName, Framework...}
</span><span class='line'>Script     PsGet                               {Get-PsGetModuleHash, Get-PsGetModuleInfo, Install-Module, Update-Mod...
</span><span class='line'>Script     ScriptCop                           {Get-ScriptCopRule, Register-ScriptCopRule, Unregister-ScriptCopRule,...
</span><span class='line'>Script     Send-Growl                          {Get-GrowlPath, Register-GrowlCallback, Register-GrowlType, Send-Grow...
</span><span class='line'>Script     ShowUI                              {Add-CodeGenerationRule, Add-UIModule, Select-UIType, Get-AssemblyNam...
</span><span class='line'>Script     TRayburn-Utils                      {New-BasicAuth, Set-AppSetting, Set-NuSpecVersion, Test-Item}</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I have a number of Modules installed, and they are installed by in the <code>WindowsPowerShell\Modules</code> folder of my Documents folder.  But as I said, there are alot of them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Module -ListAvailable | measure
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Count    : 62
</span><span class='line'>Average  :
</span><span class='line'>Sum      :
</span><span class='line'>Maximum  :
</span><span class='line'>Minimum  :
</span><span class='line'>Property :</span></code></pre></td></tr></table></div></figure>


<p>62 in fact, on my box alone, and it isn&#8217;t part of a domain, or a server, or one of many other things which might add to that list.</p>

<h3>Creating your own modules</h3>

<p>You can create your own modules very simply.  A module is just a PowerShell script, named <code>.psm1</code> instead of simply <code>.ps1</code> and which loads up a series of functions, cmdlets, aliases, etc.  The big additional requirement is that the script must also declare what it intends to make available to those who <code>Import</code> that module.  Simply defining a function in a script isn&#8217;t enough, you must also <code>Export</code> that function to those who use the module.  This is done with the Cmdlet <code>Export-ModuleMember</code>.</p>

<p>I&#8217;m not going to go into details here about how to create a PowerShell module, there is alot of information out there on that already.  If you&#8217;d like to see the source of one, check out either <a href="https://github.com/trayburn/powershell">my PowerShell repository</a>, or <a href="https://github.com/pester/pester">the repository for Pester</a>.</p>

<p>To use a module you have installed, simply type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Import-Module &lt;name&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Must-Have Modules</h3>

<p>The community of developers and administrators in the world being the wonderful geeks that they are, there are many awesome Modules that have been made available for others to consume.  While it saddens me to report that there is not one consolidated repository, like NuGet for references, there are several good places.  Both <a href="http://nuget.org">NuGet</a> and <a href="http://chocolatey.org">Chocolatey</a> have PowerShell modules hiding in their directories, but in my opinion the best overall implementation for PowerShell is <a href="http://psget.net">PsGet.net</a>.</p>

<h3>PsGet</h3>

<p>PsGet is the module that drives access to the PsGet.net directory of modules.  To get started with it, simply type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(new-object Net.WebClient).DownloadString("http://psget.net/GetPsGet.ps1") | iex</span></code></pre></td></tr></table></div></figure>


<p>This will download and install the PsGet module.  Once it&#8217;s installed, go ahead and import that module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Import-Module PsGet</span></code></pre></td></tr></table></div></figure>


<p>You now have two powerful commands are your disposal:
- Install-Module
- Update-Module</p>

<p>With these, you can install any module from the PsGet.net directory with just one command.</p>

<h3>Pester</h3>

<p>I&#8217;m a big fan of TDD/BDD and so I was sold the moment Pester was described to me as a BDD framework for PowerShell.  It allows me to test my modules with the familiar Describe, Context, It syntax.  This module was created by the awesome <a href="http://about.me/scottmuc/">Scott Muc</a> and I&#8217;ve used it in my own PowerShell work.  Details on how to use it can be found at the <a href="https://github.com/pester/pester/wiki">GitHub wiki</a> for the project, and <a href="http://scottmuc.com/powershell-pester-2-and-1-dot-2-released/">on Scott&#8217;s blog</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Install-Module Pester
</span><span class='line'>&gt; Import-Module Pester</span></code></pre></td></tr></table></div></figure>


<h3>PowerShell Community Extensions</h3>

<p>So what happens when lots of people love PowerShell and start putting together their greatest hits functions and CmdLets?  PowerShell Community Extensions (PSCX) or course!  Think of this as a -contrib project for PowerShell.  It has functions that do all sorts of things, from awesome, to cute.  How many commands?  148 as of this writing.  Everything from <code>Out-Speech</code> which voice outputs any piped content, to quick helpers like <code>Set-ReadOnly</code> and <code>Set-Writeable</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Install-Module PSCX
</span><span class='line'>&gt; Import-Module PSCX</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile.NET Houston 2013]]></title>
    <link href="http://TimRayburn.net/blog/agile-dot-net-houston-2013/"/>
    <updated>2013-05-10T16:45:00-05:00</updated>
    <id>http://TimRayburn.net/blog/agile-dot-net-houston-2013</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://TimRayburn.net/images/logo-houston-2013.png"></p>

<p>So Agile.NET Houston is coming up soon, and I&#8217;ll be there speaking as part of the Quartermaster track.  If you&#8217;d like to attend, we still have some spots available, and you can use the discount code <strong>IEFriends50</strong> to get 50% off the cost of registration, bringing it in at just $75.</p>

<h1><a href="http://adnhouston.eventbrite.com/?discount=IEFriends50">Register Now</a></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell for Developers - Functions]]></title>
    <link href="http://TimRayburn.net/blog/powershell-for-developers-functions/"/>
    <updated>2013-05-10T00:24:00-05:00</updated>
    <id>http://TimRayburn.net/blog/powershell-for-developers-functions</id>
    <content type="html"><![CDATA[<h2>Pipeline</h2>

<p>We&#8217;ve been using it already quite a bit in the past chapters, but lets take a moment and introduce, properly, the pipeline.  Pipeline&#8217;ing is powered in PowerShell using the pipe operator <code>|</code>.  It passes data from one command, to another command.  That other command had better be able to use that data.  How?  Well there is not magic here, there is conventions instead.</p>

<p>Let&#8217;s take a look at the help for our friend <code>Get-Item</code>, we do that as by typing <code>help Get-Item</code> or in our case <code>help Get-Item -Parameter Path</code> which is asking for the help for the Path parameter specifically:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; help get-item -Parameter Path
</span><span class='line'>
</span><span class='line'>-Path &lt;String[]&gt;
</span><span class='line'>    Specifies the path to an item. Get-Item gets the item at the specified location. Wildcards are permitted. This
</span><span class='line'>    parameter is required, but the parameter name ("Path") is optional.
</span><span class='line'>
</span><span class='line'>    Use a dot (.) to specify the current location. Use the wildcard character (*) to specify all the items in the
</span><span class='line'>    current location.
</span><span class='line'>
</span><span class='line'>    Required?                    true
</span><span class='line'>    Position?                    1
</span><span class='line'>    Default value
</span><span class='line'>    Accept pipeline input?       true (ByValue, ByPropertyName)
</span><span class='line'>    Accept wildcard characters?  true</span></code></pre></td></tr></table></div></figure>


<p>Did you not get this?  You likely need to install the help, run <code>Update-Help</code> and it will do so.  If you did get this, you&#8217;ll see the line that talks about <code>Accept Pipeline Input?</code> and that it states <code>true</code> but more importantly that we can pass either <strong>ByValue</strong> or <strong>ByPropertyName</strong>.  Let us explore both of those for a moment.</p>

<h3>By Value Pipeline&#8217;ing</h3>

<p>ByValue pipelines are the easiest to understand, in this case we can see from the help above we, the value for Path is expected to a <code>String[]</code> (a string array).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir | %{ $_.FullName }
</span><span class='line'>C:\source\Highway\MVC\build
</span><span class='line'>C:\source\Highway\MVC\src
</span><span class='line'>C:\source\Highway\MVC\.gitignore
</span><span class='line'>C:\source\Highway\MVC\license.txt
</span><span class='line'>C:\source\Highway\MVC\make.ps1
</span><span class='line'>C:\source\Highway\MVC\NDesk.Options.dll
</span><span class='line'>C:\source\Highway\MVC\OnRamper.exe
</span><span class='line'>C:\source\Highway\MVC\push.ps1
</span><span class='line'>C:\source\Highway\MVC\README.markdown
</span><span class='line'>C:\source\Highway\MVC\setv.ps1</span></code></pre></td></tr></table></div></figure>


<p>So here we have taken a directory listing, which is objects as we have learned previously, and then done a <code>ForEach-Object</code> on that to select just the FullName property.  FullName is a string, and so we are sending an array of strings out to the console currently.  How, lets send that same data to Get-Item:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir | %{ $_.FullName } | Get-Item
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\source\Highway\MVC
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>d----          5/4/2013  10:44 PM            build
</span><span class='line'>d----          5/2/2013   8:37 PM            src
</span><span class='line'>-a---          5/2/2013   2:19 PM        259 .gitignore
</span><span class='line'>-a---          5/2/2013   2:19 PM      16896 license.txt
</span><span class='line'>-a---          5/4/2013  11:11 AM        211 make.ps1
</span><span class='line'>-a---          5/2/2013  11:46 PM      22016 NDesk.Options.dll
</span><span class='line'>-a---          5/4/2013   6:36 PM      15872 OnRamper.exe
</span><span class='line'>-a---          5/4/2013  12:16 PM         62 push.ps1
</span><span class='line'>-a---          5/2/2013   2:19 PM      17183 README.markdown
</span><span class='line'>-a---          5/4/2013  11:26 AM        332 setv.ps1</span></code></pre></td></tr></table></div></figure>


<p>Wait &#8230; uhm &#8230; what?  Sure, we just took a bunch of FileSystemInfo objects and dumped them to the console, you know how that formats them?  As a directory listing of course.  But that means we&#8217;ve been successful in binding that data to Get-Item.  Prove it?  Ok&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir | %{ $_.FullName } | Get-Item | %{$_.GetType()}
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     DirectoryInfo                            System.IO.FileSystemInfo
</span><span class='line'>True     True     DirectoryInfo                            System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo</span></code></pre></td></tr></table></div></figure>


<p>So we have just bound <strong>ByValue</strong>, we&#8217;ve passed an array and it went to Path because of the value it was.</p>

<h3>By Property Name Pipeline&#8217;ing</h3>

<p>So how do we pass <strong>ByPropertyName</strong>?  Let us continue the above example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir | %{ @{ Path=$_.FullName} }
</span><span class='line'>
</span><span class='line'>Name                           Value
</span><span class='line'>----                           -----
</span><span class='line'>Path                           C:\source\Highway\MVC\build
</span><span class='line'>Path                           C:\source\Highway\MVC\src
</span><span class='line'>Path                           C:\source\Highway\MVC\.gitignore
</span><span class='line'>Path                           C:\source\Highway\MVC\license.txt
</span><span class='line'>Path                           C:\source\Highway\MVC\make.ps1
</span><span class='line'>Path                           C:\source\Highway\MVC\NDesk.Options.dll
</span><span class='line'>Path                           C:\source\Highway\MVC\OnRamper.exe
</span><span class='line'>Path                           C:\source\Highway\MVC\push.ps1
</span><span class='line'>Path                           C:\source\Highway\MVC\README.markdown
</span><span class='line'>Path                           C:\source\Highway\MVC\setv.ps1</span></code></pre></td></tr></table></div></figure>


<p>So here we have created a bunch of Hashtables that contain a property named Path.  Now this is to simple, it doesn&#8217;t make that point that we could have other data included in these hashtables.  So I&#8217;m going to add some of that, but limit the number of files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir *.ps1 | %{ @{ Path=$_.FullName; Size=$_.Length; Updated=$_.LastWriteTime} }
</span><span class='line'>
</span><span class='line'>Name                           Value
</span><span class='line'>----                           -----
</span><span class='line'>Path                           C:\source\Highway\MVC\make.ps1
</span><span class='line'>Size                           211
</span><span class='line'>Updated                        5/4/2013 11:11:03 AM
</span><span class='line'>Path                           C:\source\Highway\MVC\push.ps1
</span><span class='line'>Size                           62
</span><span class='line'>Updated                        5/4/2013 12:16:29 PM
</span><span class='line'>Path                           C:\source\Highway\MVC\setv.ps1
</span><span class='line'>Size                           332
</span><span class='line'>Updated                        5/4/2013 11:26:16 AM</span></code></pre></td></tr></table></div></figure>


<p>Ok, three entries, each with three properties, and we&#8217;re good &#8230; Right?  <strong>sigh</strong> No.  So you&#8217;ll see from the output, these are not properties.  They are entries in a Hashtable, and are outputted vertically under <strong>Name</strong> and <strong>Value</strong> because of this.  We can easily turn this into a real object with properties though, using a cast to <code>PSCustomObject</code> which is the PowerShell <code>dynamic</code> object.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir *.ps1 | %{ [PSCustomObject]@{ Path=$_.FullName; Size=$_.Length; Updated=$_.LastWriteTime} }
</span><span class='line'>
</span><span class='line'>Path                                                                       Size Updated
</span><span class='line'>----                                                                       ---- -------
</span><span class='line'>C:\source\Highway\MVC\make.ps1                                              211 5/4/2013 11:11:03 AM
</span><span class='line'>C:\source\Highway\MVC\push.ps1                                               62 5/4/2013 12:16:29 PM
</span><span class='line'>C:\source\Highway\MVC\setv.ps1                                              332 5/4/2013 11:26:16 AM</span></code></pre></td></tr></table></div></figure>


<p>Alright, now we have the horizontal labels for our properties, and values below that.  Awesome.  Now lets pipe that to Get-Item:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir *.ps1 | %{ [PSCustomObject]@{ Path=$_.FullName; Size=$_.Length; Updated=$_.LastWriteTime} } | Get-Item
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\source\Highway\MVC
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>-a---          5/4/2013  11:11 AM        211 make.ps1
</span><span class='line'>-a---          5/4/2013  12:16 PM         62 push.ps1
</span><span class='line'>-a---          5/4/2013  11:26 AM        332 setv.ps1</span></code></pre></td></tr></table></div></figure>


<p>Bingo, we bound Path to Get-Item.  That gives you an example now of both types of Pipeline&#8217;ing.</p>

<h2>Functions</h2>

<p>Now that we understand pipelines, how do we start to create reusable functionality?  Well, to do that we need to write functions.  And so, lets look at this in practice with everyone&#8217;s favorite demo &#8230; Hello World!</p>

<h3>Basic Script Blocks</h3>

<p>We can create a script block simply by using a set of curly braces <code>{ }</code>.  Like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; { "Hello World!" }
</span><span class='line'> "Hello World!"   </span></code></pre></td></tr></table></div></figure>


<p>That output is kind of odd, right?  It didn&#8217;t output the string, because that would not have the quotes.  What type of object did that return?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; { "Hello World!" }.GetType()
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     ScriptBlock                              System.Object</span></code></pre></td></tr></table></div></figure>


<p>Oh, so it&#8217;s a script block!  Ok, is that the string representation of the block then?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; { "Hello World!" }.ToString()
</span><span class='line'> "Hello World!"</span></code></pre></td></tr></table></div></figure>


<p>Ah!  Yep, that&#8217;s what happened.  So how do I run a script block?  Just stick a <code>.</code> or <code>&amp;</code> in front of it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; .{ "Hello World!" }
</span><span class='line'>Hello World!
</span><span class='line'>&gt; &{ "Hello World!" }
</span><span class='line'>Hello World!</span></code></pre></td></tr></table></div></figure>


<p>Yep, both of those do indeed execute, we lose the quotes, and all is well.  So we now have a code block.</p>

<h3>Named Functions</h3>

<p>But what if I want to name that script block?  Easy, we define a function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function HW { "Hello World!" }
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>Done, we&#8217;ve defined that block now as HW.  How do I run it?  I type <code>HW</code> of course!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; HW
</span><span class='line'>Hello World!</span></code></pre></td></tr></table></div></figure>


<p>Now I can assign a script block simply to a variable if I want, but if I do so, then I still need to use <code>&amp;</code> or <code>.</code> to execute it, where-as functions are called by name. See:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $hw = { "Hello World!" }
</span><span class='line'>&gt; $hw
</span><span class='line'> "Hello World!"
</span><span class='line'>&gt; &$hw
</span><span class='line'>Hello World!
</span><span class='line'>&gt; .$hw
</span><span class='line'>Hello World!</span></code></pre></td></tr></table></div></figure>


<p>But functions also have an important other aspect, which is that they can have parameters.  So let&#8217;s create a function which takes a parameter, but lets say we want to pass it a location:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function HW {
</span><span class='line'>&gt;&gt; param($location)
</span><span class='line'>&gt;&gt; "Hello $location!"
</span><span class='line'>&gt;&gt; }
</span><span class='line'>&gt;&gt;
</span><span class='line'>&gt; HW Dallas
</span><span class='line'>Hello Dallas!</span></code></pre></td></tr></table></div></figure>


<p>Now, we can specify types for parameters, so that we can&#8217;t pass bad data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function HW {
</span><span class='line'>&gt;&gt;  param([int]$location)
</span><span class='line'>&gt;&gt; "Hello $location!"
</span><span class='line'>&gt;&gt; }
</span><span class='line'>&gt;&gt;
</span><span class='line'>&gt; HW Dallas
</span><span class='line'>HW : Cannot process argument transformation on parameter 'location'. Cannot convert value "Dallas" to type
</span><span class='line'>"System.Int32". Error: "Input string was not in a correct format."
</span><span class='line'>At line:1 char:4
</span><span class='line'>+ HW Dallas
</span><span class='line'>+    ~~~~~~
</span><span class='line'>    + CategoryInfo          : InvalidData: (:) [HW], ParameterBindingArgumentTransformationException
</span><span class='line'>    + FullyQualifiedErrorId : ParameterArgumentTransformationError,HW
</span><span class='line'>
</span><span class='line'>&gt; hw 123
</span><span class='line'>Hello 123!</span></code></pre></td></tr></table></div></figure>


<p>See that we got an error now when we passed the Dallas string, but when we passed 123, we succeeded.  Now we can change this pipe in an array, passing <strong>ByValue</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1..5 | HW
</span><span class='line'>Hello 0!</span></code></pre></td></tr></table></div></figure>


<p>Huh&#8230; that didn&#8217;t do what we expected.  I guess we&#8217;ll have to give a hint that we want that Parameter to be pipelined.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function HW { param( [Parameter(ValueFromPipeline=$true)][int]$location )
</span><span class='line'>&gt;&gt; "Hello $location" }
</span><span class='line'>&gt;&gt;
</span><span class='line'>&gt; 1..5 | HW
</span><span class='line'>Hello 5</span></code></pre></td></tr></table></div></figure>


<p>Ok, but still not &#8220;correct&#8221;.  Why?  Because as it happens, we&#8217;re using the simple form of a script blocks.  A script block is <strong>actually</strong> defined by three sections: Begin, Process, and End.  By default, if we don&#8217;t specify a section, we get <strong>End</strong>.  What are the differences?  Begin runs once, before pipleline values are bound.  Process is run once for each member of the pipeline.  End runs after all members have been process.  How do we know that we get <strong>End</strong> by default?  Look at the value we got, it was the last value of the pipeline.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function HW { param( [Parameter(ValueFromPipeline=$true)][int]$location )
</span><span class='line'>&gt;&gt;  BEGIN { "Beginning : $location" }
</span><span class='line'>&gt;&gt;  PROCESS {"Processing : $location"}
</span><span class='line'>&gt;&gt;  END {"Ending: $location"}}
</span><span class='line'>&gt;&gt;
</span><span class='line'>&gt; 1..5 | HW
</span><span class='line'>Beginning : 0
</span><span class='line'>Processing : 1
</span><span class='line'>Processing : 2
</span><span class='line'>Processing : 3
</span><span class='line'>Processing : 4
</span><span class='line'>Processing : 5
</span><span class='line'>Ending: 5</span></code></pre></td></tr></table></div></figure>


<p>So here we have redefined our function, and given it a <strong>Begin</strong>, <strong>Process</strong> and <strong>End</strong> block.  And we can see that $location, <strong>because it is marked from pipeline</strong>, is not set until we are in Process, and then we run process 5 times, and finally we run ending once.</p>

<h3>Branching</h3>

<p>So&#8230; it is not programming without if blocks, right?  Well we&#8217;ve got those:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function HW { param( [Parameter(ValueFromPipeline=$true)][int]$location )
</span><span class='line'>&gt;&gt;  BEGIN { "Beginning : $location" }
</span><span class='line'>&gt;&gt;  PROCESS { if(($location % 2) -eq 0) { "Processing : $location" } else { "Else" } }
</span><span class='line'>&gt;&gt;  END {"Ending: $location"}}
</span><span class='line'>&gt;&gt;
</span><span class='line'>&gt; 1..5 | HW
</span><span class='line'>Beginning : 0
</span><span class='line'>Else
</span><span class='line'>Processing : 2
</span><span class='line'>Else
</span><span class='line'>Processing : 4
</span><span class='line'>Else
</span><span class='line'>Ending: 5</span></code></pre></td></tr></table></div></figure>


<h3>Looping</h3>

<p>First &#8230; don&#8217;t loop, pipeline.  But when you must loop, do so these ways:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function DoWhile { $i = 1; do { Write-Host $i; $i++ } while ($i -le 5) }
</span><span class='line'>&gt; DoWhile
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function WhileLoop { $i = 1; while ($i -le 5) { Write-Host $i;$i++} }
</span><span class='line'>&gt; WhileLoop
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function ForLoop { for ($i=1;$i -le 5;$i++) {Write-Host $i} }
</span><span class='line'>&gt; ForLoop
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; function ForEachLoop { $ints=@(1..5); foreach ($i in $ints) {Write-Host $i} }
</span><span class='line'>&gt; ForEachLoop
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5</span></code></pre></td></tr></table></div></figure>


<p>Those cover all of the major types of looping, and do so in a clean way, very similar to the C# syntax in all cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell for Developers - Cmdlets]]></title>
    <link href="http://TimRayburn.net/blog/powershell-for-developers-cmdlets/"/>
    <updated>2013-05-08T22:38:00-05:00</updated>
    <id>http://TimRayburn.net/blog/powershell-for-developers-cmdlets</id>
    <content type="html"><![CDATA[<h2>Cmdlets (Command-lets)</h2>

<p>In PowerShell we have a concept called Cmdlets, these are the functions we use.  We&#8217;ve already seem some of them, but this chapter will introduce you to the must-know Cmdlets.  This is not a catalog of all Cmdlets, not even close.  As of PowerShell 3.0 there are 2,430 in Windows Server 2012, without adding those available from the community.</p>

<p>Microsoft&#8217;s commitment is unfailing, they&#8217;ve committed to shipping PowerShell Cmdlets for every server product.  If you use SQL Server, Exchange, BizTalk, SharePoint or any of the other server products then you simply cannot do anything more powerful to pump up your career than to learn PowerShell.</p>

<h3>Proper Grammar</h3>

<p>Cmdlets have a grammar all of their own.  In PowerShell we are encouraged to use a grammar of <strong>Verb-Noun</strong> when creating Cmdlets and functions.  But more than that, there is a list of common verbs, which help new users discover your functions.  For instance, I created a function to update the value of an <code>AppSetting</code> in a <code>web.config</code> or <code>app.config</code> file.  Now, I&#8217;ve not memorized the whole list of verbs, so how did I know which one to use?  Well, I used the Cmdlet called <code>Get-Verb</code> like so:</p>

<p>Hmm&#8230; I wonder if it should be called Create-AppSetting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Verb C*
</span><span class='line'>
</span><span class='line'>Verb                                                        Group
</span><span class='line'>----                                                        -----
</span><span class='line'>Clear                                                       Common
</span><span class='line'>Close                                                       Common
</span><span class='line'>Copy                                                        Common
</span><span class='line'>Checkpoint                                                  Data
</span><span class='line'>Compare                                                     Data
</span><span class='line'>Compress                                                    Data
</span><span class='line'>Convert                                                     Data
</span><span class='line'>ConvertFrom                                                 Data
</span><span class='line'>ConvertTo                                                   Data
</span><span class='line'>Complete                                                    Lifecycle
</span><span class='line'>Confirm                                                     Lifecycle
</span><span class='line'>Connect                                                     Communications</span></code></pre></td></tr></table></div></figure>


<p>Nope, no listing for Create.  How about Set-AppSetting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Verb S*
</span><span class='line'>
</span><span class='line'>Verb                                                        Group
</span><span class='line'>----                                                        -----
</span><span class='line'>Search                                                      Common
</span><span class='line'>Select                                                      Common
</span><span class='line'>Set                                                         Common
</span><span class='line'>Show                                                        Common
</span><span class='line'>Skip                                                        Common
</span><span class='line'>Split                                                       Common
</span><span class='line'>Step                                                        Common
</span><span class='line'>Switch                                                      Common
</span><span class='line'>Save                                                        Data
</span><span class='line'>Sync                                                        Data
</span><span class='line'>Start                                                       Lifecycle
</span><span class='line'>Stop                                                        Lifecycle
</span><span class='line'>Submit                                                      Lifecycle
</span><span class='line'>Suspend                                                     Lifecycle
</span><span class='line'>Send                                                        Communications</span></code></pre></td></tr></table></div></figure>


<p>Alright, yep, that could work.  But I&#8217;m curious, how about Update-AppSetting?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Verb U*
</span><span class='line'>
</span><span class='line'>Verb                                                        Group
</span><span class='line'>----                                                        -----
</span><span class='line'>Undo                                                        Common
</span><span class='line'>Unlock                                                      Common
</span><span class='line'>Unpublish                                                   Data
</span><span class='line'>Update                                                      Data
</span><span class='line'>Uninstall                                                   Lifecycle
</span><span class='line'>Unregister                                                  Lifecycle
</span><span class='line'>Unblock                                                     Security
</span><span class='line'>Unprotect                                                   Security
</span><span class='line'>Use                                                         Other</span></code></pre></td></tr></table></div></figure>


<p>Bingo, Update-AppSetting is a good choice, so is Set-AppSetting.  I chose Set-AppSetting, but either would have been an excellent choice.</p>

<p>Likewise, if you were to look-up Delete:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Verb Delete
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>Nope, not there.  How about Erase?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Verb Delete
</span><span class='line'>&gt; Get-Verb Erase
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>Nope again.  How about Remove?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-Verb Delete
</span><span class='line'>&gt; Get-Verb Erase
</span><span class='line'>&gt; Get-Verb Remove
</span><span class='line'>
</span><span class='line'>Verb                                                        Group
</span><span class='line'>----                                                        -----
</span><span class='line'>Remove                                                      Common</span></code></pre></td></tr></table></div></figure>


<p>There it is!  So remember, use Get-Verb when deciding how to name things, it will help everyone out in the long run.</p>

<h3>For-Each</h3>

<p>So what is the most important Cmdlet in PowerShell?  Well, for sheer utility, I&#8217;ve got to give this award to ForEach-Object.  It allows you to iterate over any array or list of data.  So how do we use it?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6 | ForEach-Object { Write-Host $_ ($_ * $_) }
</span><span class='line'>1 1
</span><span class='line'>2 4
</span><span class='line'>3 9
</span><span class='line'>4 16
</span><span class='line'>5 25
</span><span class='line'>6 36</span></code></pre></td></tr></table></div></figure>


<p>Alright, we&#8217;ve got one call to the script block (inside the <code>{ }</code>) for every member of the array.  Now, you might be thinking, &#8220;man that is really verbose for a scripting language&#8221;, well good news that is the really long form version of that command.  Shall we terse it up a bit?</p>

<p>First, ForEach-Object has an alias (more on those later) in simply <code>%</code>.  So we can shorten it up like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6 |%{ Write-Host $_ ($_ * $_) }
</span><span class='line'>1 1
</span><span class='line'>2 4
</span><span class='line'>3 9
</span><span class='line'>4 16
</span><span class='line'>5 25
</span><span class='line'>6 36</span></code></pre></td></tr></table></div></figure>


<p>Pretty good, but we can get even better.  We&#8217;re explicitly calling Write-Host, but whatever is returned at the end of a command is automatically printed to the host.  So we can shorten it further like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6 |%{"$_ $($_ * $_)"}
</span><span class='line'>1 1
</span><span class='line'>2 4
</span><span class='line'>3 9
</span><span class='line'>4 16
</span><span class='line'>5 25
</span><span class='line'>6 36</span></code></pre></td></tr></table></div></figure>


<p>Alright, I can hear you already, hold up Mr. Smarty Pants, you just did something tricky there.  Yep, I sure did.  How did that work?  Let me explain.  Any string in double-quotes (<code>" "</code>) will have any variables (<code>$foo</code>) inside of it replaced with the value of that variable.</p>

<p>Moreover, any script block returns the last object it creates by default, so since that script block creates a string, it returns that string.  And ForEach-Object collects those objects and returns them as an Array, here to console, but it could also be piped to yet another Cmdlet or function.  But, the really attentive among you will be saying, <strong>&#8220;Wait!  You slipped in another $.&#8221;</strong> Your right, but lets see it without that extra $.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6 |%{"$_ ($_ * $_)"}
</span><span class='line'>1 (1 * 1)
</span><span class='line'>2 (2 * 2)
</span><span class='line'>3 (3 * 3)
</span><span class='line'>4 (4 * 4)
</span><span class='line'>5 (5 * 5)
</span><span class='line'>6 (6 * 6)</span></code></pre></td></tr></table></div></figure>


<p>Ah, you see, this version doesn&#8217;t actually perform the multiplication.  It replaces the $_ with each value, but the rest is just considered a string.  But PowerShell has a way to evaluate expressions in the middle of strings as well, using <code>$( expression )</code>.  So the extra $ in this <code>1,2,3,4,5,6 |%{"$_ $($_ * $_)"}</code> version evaluates the multiplication and gives us our &#8220;most terse form&#8221; of this command.</p>

<h3>Where-Object</h3>

<p>So we&#8217;ve now seen how to iterate over an array, but the other thing we usually need to do is to filter them.  In .NET, we are used to using LINQ for this, but LINQ is pretty verbose itself.  How about we cut down our list of numbers to just the even numbers using <code>Where-Object</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6| Where-Object { ($_ % 2) -eq 0 } |%{"$_ $($_ * $_)"}
</span><span class='line'>2 4
</span><span class='line'>4 16
</span><span class='line'>6 36</span></code></pre></td></tr></table></div></figure>


<p>Outstanding, but verbose.  Well just like with <code>For-Each</code> above, there is a much shorter alias for <code>Where-Object</code> which is <code>?</code>.  That shortens us up to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6|?{ ($_ % 2) -eq 0 } |%{"$_ $($_ * $_)"}
</span><span class='line'>2 4
</span><span class='line'>4 16
</span><span class='line'>6 36</span></code></pre></td></tr></table></div></figure>


<h4>A little diversion&#8230;</h4>

<p>Now, we&#8217;ve seen how to limit the array, but here&#8217;s a little diversion.  At the current time we&#8217;re returning an array of strings.  Actually, since all arrays in PowerShell are arrays of Objects (in C# <code>Object[]</code>), this would be an array of objects consisting entirely of string objects.  Prove it?  Sure.  First the type of the array itself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; (1,2,3,4,5,6|?{ ($_ % 2) -eq 0 } |%{"$_ $($_ * $_)"}).GetType()
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Object[]                                 System.Array</span></code></pre></td></tr></table></div></figure>


<p>And now the individual members:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6|?{ ($_ % 2) -eq 0 } |%{"$_ $($_ * $_)"} | %{ $_.GetType() }
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     String                                   System.Object
</span><span class='line'>True     True     String                                   System.Object
</span><span class='line'>True     True     String                                   System.Object</span></code></pre></td></tr></table></div></figure>


<p>But what if I wanted to have access to each of those numbers (the number itself, and the square) at the end of the command.  One way to do this would be to create a <code>Hashtable</code> instead of a <code>String</code> like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6|?{ ($_ % 2) -eq 0 } |%{@{Num=$_;Square=$_ * $_}}
</span><span class='line'>
</span><span class='line'>Name                           Value
</span><span class='line'>----                           -----
</span><span class='line'>Num                            2
</span><span class='line'>Square                         4
</span><span class='line'>Num                            4
</span><span class='line'>Square                         16
</span><span class='line'>Num                            6
</span><span class='line'>Square                         36</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s check the types:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3,4,5,6|?{ ($_ % 2) -eq 0 } |%{@{Num=$_;Square=$_ * $_}} | %{$_.GetType()}
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Hashtable                                System.Object
</span><span class='line'>True     True     Hashtable                                System.Object
</span><span class='line'>True     True     Hashtable                                System.Object</span></code></pre></td></tr></table></div></figure>


<p>Yep, Hashtables.</p>

<p>But sometimes have to name variable when you don&#8217;t intend to use those names is a bit annoying a verbose.  So instead, we can create an array by simply using the <code>,@( )</code> array constructor syntax:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $a = 1,2,3,4,5,6|?{ ($_ % 2) -eq 0 } |%{,@($_,($_ * $_))}
</span><span class='line'>&gt; $a
</span><span class='line'>2
</span><span class='line'>4
</span><span class='line'>4
</span><span class='line'>16
</span><span class='line'>6
</span><span class='line'>36</span></code></pre></td></tr></table></div></figure>


<p>Uhm, output looks a little wierd.  Lets take a look at the type of <code>$a</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $a.GetType()
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Object[]                                 System.Array</span></code></pre></td></tr></table></div></figure>


<p>Ok, an array. And it&#8217;s members?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $a | %{ $_.GetType() }
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Object[]                                 System.Array
</span><span class='line'>True     True     Object[]                                 System.Array
</span><span class='line'>True     True     Object[]                                 System.Array</span></code></pre></td></tr></table></div></figure>


<p>Alright, more arrays!  And inside the first one of those?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $a[0] | %{$_.GetType()}
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Int32                                    System.ValueType
</span><span class='line'>True     True     Int32                                    System.ValueType</span></code></pre></td></tr></table></div></figure>


<p>Boom, <code>Int32</code>s for the win.  Instant multi-dimensional array.  This is powerful, it is a terse syntax which is similar to Tuples in other languages.  Because they are <code>Object[]</code> arrays, the types don&#8217;t have to match.  Oh yeah, did I mention there is a short form for creating arrays of concurrent integers?  Ohm, my bad. For instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $a = 1..6|?{ ($_ % 2) -eq 0 } |%{,@($_,($_ * $_),"Smile")}
</span><span class='line'>&gt; $a.GetType()
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Object[]                                 System.Array
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&gt; $a | %{ $_.GetType() }
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Object[]                                 System.Array
</span><span class='line'>True     True     Object[]                                 System.Array
</span><span class='line'>True     True     Object[]                                 System.Array
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&gt; $a[0] | %{$_.GetType()}
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Int32                                    System.ValueType
</span><span class='line'>True     True     Int32                                    System.ValueType
</span><span class='line'>True     True     String                                   System.Object</span></code></pre></td></tr></table></div></figure>


<h3>Get-ChildItem</h3>

<p>The last Cmdlet I want to introduce in this chapter is the one most people use without even knowing that they&#8217;re doing so.  If you&#8217;ve every opened a PowerShell command prompt, you&#8217;ve likely done something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dir
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\Source\Highway
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>d----          5/2/2013   2:20 PM            Data
</span><span class='line'>d----          5/4/2013  10:44 PM            MVC
</span><span class='line'>d----          5/4/2013   6:37 PM            Onramper
</span><span class='line'>d----          5/4/2013   6:46 PM            Services
</span><span class='line'>-a---          5/4/2013  11:59 AM       1062 dest
</span><span class='line'>-a---          5/4/2013  12:11 PM        385 distribute.ps1</span></code></pre></td></tr></table></div></figure>


<p>Or perhaps if you&#8217;re from the <code>bash</code> or other <code>sh</code> descendant family of shell users:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\Source\Highway
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>d----          5/2/2013   2:20 PM            Data
</span><span class='line'>d----          5/4/2013  10:44 PM            MVC
</span><span class='line'>d----          5/4/2013   6:37 PM            Onramper
</span><span class='line'>d----          5/4/2013   6:46 PM            Services
</span><span class='line'>-a---          5/4/2013  11:59 AM       1062 dest
</span><span class='line'>-a---          5/4/2013  12:11 PM        385 distribute.ps1</span></code></pre></td></tr></table></div></figure>


<p>Now, in reality you&#8217;re using a Cmdlet called Get-ChildItem.  Prove it?  Sure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Get-ChildItem
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    Directory: C:\Source\Highway
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime     Length Name
</span><span class='line'>----                -------------     ------ ----
</span><span class='line'>d----          5/2/2013   2:20 PM            Data
</span><span class='line'>d----          5/4/2013  10:44 PM            MVC
</span><span class='line'>d----          5/4/2013   6:37 PM            Onramper
</span><span class='line'>d----          5/4/2013   6:46 PM            Services
</span><span class='line'>-a---          5/4/2013  11:59 AM       1062 dest
</span><span class='line'>-a---          5/4/2013  12:11 PM        385 distribute.ps1</span></code></pre></td></tr></table></div></figure>


<p>Now this Cmdlet has so much power it almost deserves a chapter to itself.  Let&#8217;s review just a few things that can&#8217;t be skipped over.  First, this Cmdlet returns an array of <code>FileSystemInfo</code> objects.  Of course that&#8217;s easy to prove:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls |%{$_.GetType()}
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     DirectoryInfo                            System.IO.FileSystemInfo
</span><span class='line'>True     True     DirectoryInfo                            System.IO.FileSystemInfo
</span><span class='line'>True     True     DirectoryInfo                            System.IO.FileSystemInfo
</span><span class='line'>True     True     DirectoryInfo                            System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo
</span><span class='line'>True     True     FileInfo                                 System.IO.FileSystemInfo</span></code></pre></td></tr></table></div></figure>


<p>That means we have access to all sorts of data about those directory items by pipeing that command along.  For instance, what if I wanted the full path and filename?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls |%{$_.FullName}
</span><span class='line'>C:\Source\Highway\Data
</span><span class='line'>C:\Source\Highway\MVC
</span><span class='line'>C:\Source\Highway\Onramper
</span><span class='line'>C:\Source\Highway\Services
</span><span class='line'>C:\Source\Highway\dest
</span><span class='line'>C:\Source\Highway\distribute.ps1</span></code></pre></td></tr></table></div></figure>


<p>And if I wanted to get just the files?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls -File |%{$_.FullName}
</span><span class='line'>C:\Source\Highway\dest
</span><span class='line'>C:\Source\Highway\distribute.ps1</span></code></pre></td></tr></table></div></figure>


<p>And if I wanted their sizes instead?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls -File |%{$_.Length}
</span><span class='line'>1062
</span><span class='line'>385</span></code></pre></td></tr></table></div></figure>


<h4>Another bonus section? Oh, ok&#8230;</h4>

<p>We can restrict the types of files to a pattern like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls -File *.ps1 |%{$_.Length}
</span><span class='line'>385</span></code></pre></td></tr></table></div></figure>


<p>What if I wanted that same thing, recursively, through every subdirectory of my current location?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls -File *.ps1 -Recurse|%{$_.Length}
</span><span class='line'>10275
</span><span class='line'>10424
</span><span class='line'>4001
</span><span class='line'>1332
</span><span class='line'>1546
</span><span class='line'>2987
</span><span class='line'>332
</span><span class='line'>188
</span><span class='line'>2997
</span><span class='line'>344
</span><span class='line'>194
</span><span class='line'>211
</span><span class='line'>62
</span><span class='line'>332
</span><span class='line'>0
</span><span class='line'>0
</span><span class='line'>0
</span><span class='line'>0
</span><span class='line'>247
</span><span class='line'>243
</span><span class='line'>368
</span><span class='line'>247
</span><span class='line'>243
</span><span class='line'>0
</span><span class='line'>0
</span><span class='line'>0
</span><span class='line'>0
</span><span class='line'>880
</span><span class='line'>265
</span><span class='line'>265
</span><span class='line'>217
</span><span class='line'>62
</span><span class='line'>332
</span><span class='line'>385</span></code></pre></td></tr></table></div></figure>


<p>And &#8230; if I wanted all those summed up?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ls -File *.ps1 -Recurse|%{$_.Length}|Measure-Object -Sum
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Count    : 34
</span><span class='line'>Average  :
</span><span class='line'>Sum      : 38979
</span><span class='line'>Maximum  :
</span><span class='line'>Minimum  :
</span><span class='line'>Property :</span></code></pre></td></tr></table></div></figure>


<h3>Aliases</h3>

<blockquote><p>There are a finite number of keystrokes left in your hands before you die. &#8211; <a href="http://www.hanselman.com/blog/DoTheyDeserveTheGiftOfYourKeystrokes.aspx">Scott Hanselman</a></p></blockquote>

<p>So, you&#8217;ve likely picked up by now that I&#8217;m a fan of terse commands.  Terse commands allow you to move faster, which to me is a huge part of why I&#8217;m investing in PowerShell.  There is an ability in PowerShell to create shorter versions of Cmdlets, as you&#8217;ve seen already in this article, called Aliases.  There are alot of aliases already defined.  How many?  So many I can&#8217;t just do a screen shot of them, but I can count them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; alias | Measure-Object
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Count    : 150
</span><span class='line'>Average  :
</span><span class='line'>Sum      :
</span><span class='line'>Maximum  :
</span><span class='line'>Minimum  :
</span><span class='line'>Property :</span></code></pre></td></tr></table></div></figure>


<p>150 aliases already defined for you.  If you want to see what command is behind something like <code>dir</code> you can simply:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; alias dir
</span><span class='line'>
</span><span class='line'>CommandType     Name                                               ModuleName
</span><span class='line'>-----------     ----                                               ----------
</span><span class='line'>Alias           dir -&gt; Get-ChildItem</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>dir</code> is <code>Get-ChildItem</code>.  What if I wanted to see all aliases for a given Cmdlet?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; alias -Definition Get-ChildItem
</span><span class='line'>
</span><span class='line'>CommandType     Name                                               ModuleName
</span><span class='line'>-----------     ----                                               ----------
</span><span class='line'>Alias           dir -&gt; Get-ChildItem
</span><span class='line'>Alias           gci -&gt; Get-ChildItem
</span><span class='line'>Alias           ls -&gt; Get-ChildItem</span></code></pre></td></tr></table></div></figure>


<p>Now, aliases are something you can expand on!  You can make it super easy to open text files by aliases <code>notepad.exe</code> as so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; New-Alias n C:\Windows\system32\notepad.exe
</span><span class='line'>&gt; n .\distribute.ps1</span></code></pre></td></tr></table></div></figure>


<p>That opens Notepad, with the <code>distribute.ps1</code> file already opened for editing.  I keep aliases around for a lot of things.  For my text editor, my text comparison tool, and so much more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell for Developers - Intro]]></title>
    <link href="http://TimRayburn.net/blog/powershell-for-developers-intro/"/>
    <updated>2013-05-07T13:00:00-05:00</updated>
    <id>http://TimRayburn.net/blog/powershell-for-developers-intro</id>
    <content type="html"><![CDATA[<blockquote><p> I must go down to the seas again, to the lonely sea and the sky,
 And all I ask is a tall ship and a star to steer her by,
 And the wheel&#8217;s kick and the wind&#8217;s song and the white sail&#8217;s shaking,
 And a gray mist on the sea&#8217;s face, and a gray dawn breaking.
 &#8211; Sea Fever by John Masefield</p></blockquote>

<p>Every developer knows that in order to be successful at their chosen profession, they need to keep the best tools at their disposal.  We all have our favorite text editors, and our favorite comparison tools, and the wise among us also have our favorite scripting languages and command line environments.</p>

<p>I am an unabashed fan of GIT, and as such for several years now I&#8217;ve used the <code>bash</code> shell as my command line environment of choice.  But I recently started paying more attention to <code>PowerShell</code> and I realized that I had not at all given it it&#8217;s due when I first learned about it several years ago.  I&#8217;ve spoken recently with @DevlinLiles, @AmirRajan, @CoriDrew, and @BForrest about this, and I realized that I wasn&#8217;t alone at all in this.  Most developers working in .NET languages have mostly ignored PowerShell.  I intend this series of blog posts to correct this issue.</p>

<h2>The Basics</h2>

<blockquote><p> Let&#8217;s start at the very beginning
 A very good place to start
 When you read you begin with A-B-C
 When you sing you begin with do-re-mi
 &#8211; &#8220;Do-Re-Mi&#8221; by Rodgers &amp; Hammerstein</p></blockquote>

<h3>PowerShell 3.0</h3>

<p>So how do I use the <code>PowerShell</code> thing, Tim?  Easy.  First, we need to know what version of Windows you&#8217;re using now, because we might want to upgrade you to the latest version.  If you&#8217;re using <strong>Windows 8</strong> or <strong>Windows Server 2012</strong> then you&#8217;re good, you already have PowerShell 3.0.  If you&#8217;re using <strong>Windows 7</strong> or <strong>Windows Server 2008</strong> or <strong>Windows Server 2008 R2</strong>, then you need to download the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=34595">Windows Management Pack 3.0</a> which upgrades you to PowerShell 3.0.</p>

<p>Not sure if someone else might have already installed it?  Just open PowerShell (hint: Win+R -> <code>PowerShell</code> <strong>enter</strong>) and enter <code>$host.version</code> at the prompt.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $host.version
</span><span class='line'>
</span><span class='line'>Major  Minor  Build  Revision
</span><span class='line'>-----  -----  -----  --------
</span><span class='line'>3      0      -1     -1</span></code></pre></td></tr></table></div></figure>


<p>The above it what we&#8217;re looking for, anything else, and you need to install the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=34595">Windows Management Pack 3.0</a>.</p>

<h3>Variables</h3>

<p>The first thing you need to know about PowerShell is how to create a variable.  This is very simple, you just assign it to a variable name.  In PowerShell, all variables are preceded by a <code>$</code>.  So if you want to create a variable X and assign the integer value 1 to it, you would type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $X = 1</span></code></pre></td></tr></table></div></figure>


<p>Important to know, especially for C# developers, is that PowerShell is <strong>case-insensitive</strong>.  As such, <code>$X</code> is the same as <code>$x</code>.</p>

<h4>Value Types</h4>

<p>Now, .NET developers, pay attention to this.  In PowerShell all variables are actual objects, not just string values.  What do I mean?  Type this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $X.GetType()
</span><span class='line'>
</span><span class='line'>IsPublic IsSerial Name                                     BaseType
</span><span class='line'>-------- -------- ----                                     --------
</span><span class='line'>True     True     Int32                                    System.ValueType</span></code></pre></td></tr></table></div></figure>


<p><strong>Holy smoke!</strong> That variable is an <code>Int32</code>, I mean a real <code>System.Int32</code>.</p>

<p>Because of this, we can use any type of methods that might exist on those objects.  For instance, we could type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $X.Equals(4)
</span><span class='line'>False</span></code></pre></td></tr></table></div></figure>


<p>So how do we create non-value types then?  That depends&#8230;</p>

<h4>Reference Types via New-Object</h4>

<p>Most of the time, we are used to creating .NET objects by typing something like <code>var dt = new System.DateTime()</code> but in PowerShell we have something similar, but different:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $dt = New-Object System.DateTime</span></code></pre></td></tr></table></div></figure>


<p>You can always check the value of a variable, just by typing it&#8217;s name at the prompt like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $dt
</span><span class='line'>
</span><span class='line'>Monday, January 1, 0001 12:00:00 AM</span></code></pre></td></tr></table></div></figure>


<p>That makes total sense, that is the default value of a DateTime aka <code>default(DateTime)</code> in C#.  But in reality, I tend to use <code>System.DateTime.Now</code> to get the system time, more often than I do <code>new DateTime()</code>, so how to I do that in PowerShell?</p>

<h4>Reference Types via Static Properties &amp; Methods</h4>

<p>So if we want to access the .NET Framework&#8217;s static types, we simply need to reference the type, and then the method, as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; [System.DateTime]::Now
</span><span class='line'>
</span><span class='line'>Monday, May 6, 2013 10:22:26 PM</span></code></pre></td></tr></table></div></figure>


<p>Now, if we wanted to assign that to our variable, we would just do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $dt = [System.DateTime]::Now</span></code></pre></td></tr></table></div></figure>


<p>Please note, when we assign the value to a variable, we no longer get output to the console.  We&#8217;ll see how to change that in just a bit.</p>

<h3>Arrays</h3>

<p>Arrays are common in all programming languages, they represent a series of values.  In PowerShell, those values are not required to be of the same type, you can think of all Arrays in .NET terms as <code>System.Object[]</code>, an array of Objects.</p>

<p>Declaring and using arrays could not possibly be easier in PowerShell, we simply put together a series of values, separated by commas.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,2,3
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3</span></code></pre></td></tr></table></div></figure>


<p>As I noted above, they don&#8217;t have to be of the same type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 1,"abc",[System.DateTime]::Now
</span><span class='line'>1
</span><span class='line'>abc
</span><span class='line'>
</span><span class='line'>Monday, May 6, 2013 10:28:15 PM</span></code></pre></td></tr></table></div></figure>


<p>And that is all there is to arrays.  You can add members to arrays many ways, but the simplest is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $arr = 1,2,3
</span><span class='line'>&gt; $arr
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>&gt; $arr = $arr + 4,5,6
</span><span class='line'>&gt; $arr
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>6</span></code></pre></td></tr></table></div></figure>


<h3>Hashtable</h3>

<p>There is one other type of object which is critical to the world of PowerShell, and that is the Hashtable.  PowerShell is a dynamic language, in fact as of 3.0 it&#8217;s even built on top of the Dynamic Language Runtime, but as such it needs a flexible structure for storing loosely types objects.  Enter the Hashtable.</p>

<p>The syntax for Hashtable couldn&#8217;t possibly be easier, to create one you just use <code>@{ key=value; key2=value2}</code> So for instance, if you want to create a Hashtable to store a bunch of people, you could do so like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $tim = @{ FirstName="Tim";LastName="Rayburn"}
</span><span class='line'>&gt; $cori = @{ FirstName="Cori";LastName="Drew"}
</span><span class='line'>&gt; $barry = @{ FirstName="Barry";LastName="Forrest"}</span></code></pre></td></tr></table></div></figure>


<p>Now, as we learned in the last section, we can create an array just by separating items by commas, so lets do so, and then sort these people by FirstName:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $tim,$cori,$barry | Sort-Object FirstName
</span><span class='line'>
</span><span class='line'>Name                           Value
</span><span class='line'>----                           -----
</span><span class='line'>LastName                       Forrest
</span><span class='line'>FirstName                      Barry
</span><span class='line'>LastName                       Drew
</span><span class='line'>FirstName                      Cori
</span><span class='line'>LastName                       Rayburn
</span><span class='line'>FirstName                      Tim</span></code></pre></td></tr></table></div></figure>


<p>As you can see, Barry is now listed first, then Cori, then Tim.  Don&#8217;t worry about understanding Sort-Object just yet, we&#8217;ll get into how that line works more in the next post.</p>

<p>Now, lets imagine I want to add a value for Employer to each of these.  How to I change a Hashtable once it has been created?  Easy, just refer to a property that doesn&#8217;t exist yet, and set its value.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $tim.Employer = "Improving Enterprises"
</span><span class='line'>&gt; $barry.Employer = "Improving Enterprises"
</span><span class='line'>&gt; $cori.Employer = "Improving Enterprises (Contractor until August)"</span></code></pre></td></tr></table></div></figure>


<h3>Constants</h3>

<p>In addition to all of the above, there are a couple of constants which you might want to know about when developing.  <code>$null</code> is the constant value of a Null Reference.  In addition there are constants for <code>$true</code> and <code>$false</code> though if a boolean is expected you can also always use <code>1</code> or <code>0</code> respectively.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Dynamic Schema in Azure Mobile Services]]></title>
    <link href="http://TimRayburn.net/blog/working-with-dynamic-schema-in-azure-mobile-services/"/>
    <updated>2012-12-12T11:45:00-06:00</updated>
    <id>http://TimRayburn.net/blog/working-with-dynamic-schema-in-azure-mobile-services</id>
    <content type="html"><![CDATA[<p>Lately I&#8217;ve been developing on a side project using the awesome <a href="http://chriskoenig.net/2012/10/17/new-azure-sdk-and-services-updates/">Azure Mobile Services</a> offering from Microsoft.  Specifically I&#8217;ve been developing a Windows Phone 8 application, the details of which will be revealed in time.  One of the best features of Azure Mobile Services is the ability to work with a Dynamic Schema, it will automatically insert new columns for fields it has never received before.</p>

<p>There are many great reasons for this during development.  It allows for rapid iteration, which is great.  But, let&#8217;s take the example of the <a href="https://github.com/WindowsAzure-TrainingKit/HOL-Windows8AndMobileServices/blob/master/HOL.md">Todo Hands On Lab</a>, and look at the DataContract established for it&#8217;s entity.</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Now, lets say I wanted to add a property called Description to this, I might update the above code as follows:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>If I change nothing else other than this, I when I run my program I&#8217;d expect that the Description column would be added to the database when I saved a new item.  But, instead, I get the following exception when I save an item:</p>

<pre>
Microsoft.WindowsAzure.MobileServices.MobileServiceInvalidOperationException was unhandled by user code
  HResult=-2146233079
  Message=Error: Unable to insert a null value for new property 'description'
  Source=Microsoft.Azure.Zumo.WindowsPhone8.Managed
  InnerException: 
</pre>


<p>I was more than a little baffled by this concept, my first read of this exception got me thinking things like: &#8221;<em>who on earth would design a dynamic data feature to create NON NULLABLE FIELDS?!?!?</em>&#8221; and other less kind statements.  Well, as they say, pride commeth before the fall.  As I&#8217;ve researched this error, I&#8217;ve realized it&#8217;s entirely reasonable.  Why?  Ah&#8230; REST.</p>

<p>Azure Mobile Services data offering is built as a set of RESTful services, using JSON serialization.  That means that initially my request to add an entry named &#8220;Foo&#8221; would have looked like this:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>When I added the additional field but didn&#8217;t set a value for it, the serializer added it to the submitted output, resulting in:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Sure, that makes sense &#8230; Unless your the SQL Server who is now being asked to add that new field.  Why?  Because you&#8217;ve got NO IDEA what the data type of description is.  Whoops!  So how do we solve this?  Well, there are a couple of ways we can do that.</p>

<ol>
<li>We could add the field manually in SQL Server, specifying the data type desired.  This works great, but kindof unravels the whole point of Dynamic Schema.</li>
<li>We could put in temporary code, so that the first time we send this up, it&#8217;s populated.  After that, the field is nullable so there is no problem storing nulls from that point onward.  I&#8217;m not a big fan of &#8220;secret recipes&#8221; in code bases, and this model leaves no trace for the next guy of the &#8220;proper procedure&#8221; so I decided against it.</li>
<li>We could add a Setup script, which pushed a single completely populated entity.  This could be run all sorts of ways, from a unit test to a rake task, but would ensure the schema desired.  This solution is better, but still a little buried for me.</li>
<li>We could make the DBAs amongst us cry, and decide that our entities will provide a default value for reference types such as string (note value types don&#8217;t have this problem, they can&#8217;t be null) in the constructor of our type.  This technically takes more space, and I&#8217;m certain the DBAs will yell at me about other reasons, but on the other hand it leaves a clear pattern to be followed by future developers.</li>
</ol>


<p>I chose option 4.  That resulted in this code:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Now, you can feel free to make a different choice, but for me and my project, this pattern is working just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone 8 Development on a Mac]]></title>
    <link href="http://TimRayburn.net/blog/windows-phone-8-development-on-a-mac/"/>
    <updated>2012-12-11T07:02:00-06:00</updated>
    <id>http://TimRayburn.net/blog/windows-phone-8-development-on-a-mac</id>
    <content type="html"><![CDATA[<p>So you want to do Windows Phone 8 development on a Mac, the traditional answer to this has been, your out of luck.  The hurdles are two fold:</p>

<ul>
<li>The Windows Phone Emulator has always, since Windows Phone 7, been run as a HyperV virtual machine.  This means if your running Windows itself inside a VM, running the emulator is like trying to run a VM inside a VM.  This has traditionally been an unsupported scenario.</li>
<li>The Windows Phone 8 Emulator raised the bar again, because it only runs on Windows 8.  That causes two problems for us.  The first is that Boot Camp hasn&#8217;t been updated to support Windows 8 yet, so we can&#8217;t (easily) get the necessary drivers for our Mac to run Windows 8.</li>
<li>The second problem that Windows 8 requirement brings us is that HyperV in Windows 8 requires <a href="http://www.ryanlowdermilk.com/2012/09/does-my-computer-support-slat/">&#8220;Second Level Address Translation&#8221;</a> support from it&#8217;s CPUs.  That means the CPU its running on has to support very new virtualization support in order to run.  That will make it even more difficult for a VM solution to work for us.</li>
</ul>


<p>But fear not my valiant friends, for there is an answer.  <a href="http://www.vmware.com/products/fusion/overview.html">VMWare Fusion</a> has heard your cries, and there is a way to solve this problem.  Here are the necessary steps, care of <a href="http://social.msdn.microsoft.com/Forums/en-US/wptools/thread/ed72010c-321c-4667-97b2-3ff1540e7f87">an awesome MSDN forums post</a>:</p>

<ol>
<li>Using <a href="http://www.vmware.com/products/fusion/overview.html">VMWare Fusion 5</a> or better, create and install a Windows 8 virtual machine.  If you have one already, your fine.</li>
<li>Stop the virtual machine by shutting down Windows 8.</li>
<li>At the VMWare Virtual Machine list, right click Windows 8 machine then click &#8220;Show in Finder&#8221;.</li>
<li>Right click the file then click &#8220;Show package contents&#8221;, then find and open with a text editor a file with the extension .vmx</li>
<li>Go till the end of the file and add this two lines (first check whether they were previously added):
 <pre>
 hypervisor.cpuid.v0 = "FALSE"
 vhv.enable = "TRUE"
 </pre></li>
<li>At the VMWare Virtual Machine list, right click Windows 8, click &#8220;Preferences&#8221; then &#8220;Advanced&#8221;. Choose &#8220;Intel VT-X with EPT&#8221; as &#8220;Preferred virtualization engine&#8221;.</li>
<li>Start your virtual machine, launch Visual Studio, and develop away.  The emulator will happily run.</li>
</ol>


<p>Obviously this solution is a &#8220;It works on my machine&#8221; situation, but I&#8217;m sure you will find success down this path.</p>

<h2>Update 12/12/12</h2>

<p>Several questions were asked, so quickly:</p>

<ul>
<li>Does Parallels support this?  As of today, no.  <a href="http://forum.parallels.com/showthread.php?t=264780">See this support forum post from them.</a></li>
<li>Does your processor have to support SLAT?  Yes, your physical hardware must be current enough to support SLAT.  For Macs, this means you need to be running an i5 or i7 mac.</li>
<li>What hardware are you running?  As of today, I&#8217;m running this solution on a Thunderbolt MacBook Pro running a 2.3 Ghz i7 and Lion, not Mountain Lion.  The official Model Identifier for my mac is MacBookPro8,3.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Bootcamp in Houston]]></title>
    <link href="http://TimRayburn.net/blog/azure-bootcamp-in-houston/"/>
    <updated>2012-10-05T09:47:00-05:00</updated>
    <id>http://TimRayburn.net/blog/azure-bootcamp-in-houston</id>
    <content type="html"><![CDATA[<p><img src="http://TimRayburn.net/images/ie-logo-small.jpg" title="Improving Enterprises Logo" alt="Improving Enterprises Logo"></p>

<p>How would you like a <a href="http://www.improvingenterprises.com/events/event/windows-azure-developer-camp/">free full day of training</a> from the best and brightest of <a href="http://improvingenterprises.com">Improving Enterprises</a>?  Well have I got a deal for you!</p>

<p>On October the 22nd, at the Microsoft Offices in Houston, we will be hosting a Windows Azure Developer Camp.  We will be covering all of the basics of Windows Azure, from IaaS to Websites, from SQL Azure to Mobile Services.  And what&#8217;s more?  We&#8217;ve got some rockstar trainers for you.  <a href="http://www.improvingenterprises.com/about/people/todd-girvin/bio/">Todd Girvin</a>, <a href="http://www.improvingenterprises.com/about/people/allen-hurst/bio/">Allen Hurst</a>, <a href="http://www.improvingenterprises.com/about/people/devlin-liles/bio/">Devlin Liles</a>, <a href="http://www.improvingenterprises.com/about/people/chris-weldon/bio/">Chris Weldon</a>, <a href="http://www.improvingenterprises.com/about/people/ben-floyd/bio/">Ben Floyd</a> and <a href="http://www.improvingenterprises.com/about/people/tim-rayburn/bio/">myself</a> will guide you through all the hands on labs, and you&#8217;ll leave ready to bring the incredible scale and ease of Windows Azure to your next project.</p>

<p>While you&#8217;re there, be sure to ask about our <a href="http://www.improvingenterprises.com/2012/09/10/improving-and-alphaware-join-forces/">incredible new Houston offices</a>.  Need consultants in Houston?  We&#8217;re open for business and ready to help.  Looking for a new job?  Drop me a line, and we&#8217;ll talk about the opportunities for you to start improving.</p>

<p>Even if none of that is true, be sure to ask us that day about our upcoming Monday Night Football event.</p>

<h1><a href="http://www.improvingenterprises.com/events/event/windows-azure-developer-camp/">Signup Now</a></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Six Time Microsoft MVP]]></title>
    <link href="http://TimRayburn.net/blog/six-time-microsoft-mvp/"/>
    <updated>2012-07-01T14:11:00-05:00</updated>
    <id>http://TimRayburn.net/blog/six-time-microsoft-mvp</id>
    <content type="html"><![CDATA[<p>I&#8217;m thrilled to announce that Microsoft has deemed fit to award my efforts over the last year with a Microsoft MVP for Connected Systems Development, once again.  This marks my sixth year as an MVP, a community of such passionate leaders, contributors and influencers that it could boggle the mind.  Every MVP is different, but each brings a passion about their technology that is infectious.</p>

<p>I look forward to once again getting the chance to visit the Microsoft campus during the MVP Summit, and to continue to help start conversations everywhere I go.  I&#8217;m also thrilled to announce that <a href="http://devlinliles.com">Devlin Liles</a>, my co-author for <a href="http://www.packtpub.com/entity-framework-4-1-experts-test-driven-development-architecture-cookbook/book">Entity Framework 4.1 : An Expert&#8217;s Cookbook</a>, was also re-awarded today as an MVP for Data Platform Development.  With that, I&#8217;ll let you get back to your day, and I&#8217;ll get back to celebrating my wife&#8217;s birthday which is also July 1st and which she has shared the celebration of my award for the last six years.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the Highway Framework]]></title>
    <link href="http://TimRayburn.net/blog/introducing-the-highway-framework/"/>
    <updated>2012-06-29T07:18:00-05:00</updated>
    <id>http://TimRayburn.net/blog/introducing-the-highway-framework</id>
    <content type="html"><![CDATA[<p>Today I&#8217;m pleased to announce a combined effort of <a href="http://TimRayburn.net/about/">myself</a> and <a href="http://devlinliles.com/">Devlin Liles</a> which we are calling <a href="http://HighwayFramework.com">The Highway Framework</a>, &#8220;The fastest and smoothest way to great architecture&#8221;.  For this initial release we&#8217;ve focused on data access architecture with Entity Framework, a topic we&#8217;ve recently <a href="http://www.packtpub.com/entity-framework-4-1-experts-test-driven-development-architecture-cookbook/book">written a book</a> about, but you can expect further greatness from us on other topics in the future.  As you most likely know, Devlin and I are both consultants with <a href="http://improvingenterprises.com">Improving Enterprises</a> and this is framework definitely distills alot of learning from our various clients and from other Improving consultants.  We invite you to read on, check out <a href="http://HighwayFramework.com">the source code on github</a>, our <a href="http://highwayframework.github.com/Highway.Data/docs/index.html">API Documentation</a>, <a href="http://highwayframework.github.com/Highway.Data">review the website</a>, and tells us what you think.  All that said, let&#8217;s tell you about Highway.Data.</p>

<h2>Highway.Data</h2>

<p>This project focuses on bringing our recommendations for data access, specifically the Repository and Specification patterns.  For this intial release we&#8217;ve focused on delivering these for Entity Framework, but in the future you can look foward implementations for NHibernate and other data access structures.  If we&#8217;re going to work with Entity Framework in a code first fashion, we will need some POCOs.  Our guidance with Highway.Data is not to use the Mapping attributes, which instantly make your POCOs aware of your database, but rather to use a mapping class.  We provide an interface you can implement to configure your Entity Framework mappings, it is called IMappingConfiguration.  So let&#8217;s say we&#8217;re working with the following POCO:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>We can create a very simply mapping class to store that in the database in the People table:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Now all that is left is to register with our container, and we&#8217;re off and running.  For this demo, we&#8217;ll show how to do that with Castle.Windsor:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>We now have a completely wired up Highway.Data implementation, and can resolved IRepository into any of our classes which need to access data.  But that&#8217;s only the first half of Highway.Data.</p>

<h2>Specification Pattern</h2>

<p>In addition to a repository pattern implementation, we also provide an implementation of Specification pattern in Highway.Data.  We use the pattern to ensure our queries are all testable, without access to a database, and also to be able to quickly enumerate, and if necessary generate SQL for, all the queries are project uses.  There are few things that will make a DBA smile more than to learn that a project using an ORM can quickly produce for him or her a list of all queries used by that application.  That said, let me show you how you create a simple query against the LastName property of our Person.</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>As you can see, we create a class to represent our query, and provide the query implementation to the ContextQuery property.  Once we&#8217;ve created this query, using it is as simple as:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Obviously, this could be any class in your application, we depend on an IRepository, and hand the Find method our query, and our query it&#8217;s parameter.  And that&#8217;s it!</p>

<h2>NuGet Packages</h2>

<p>We provide three NuGet Packages:</p>

<ul>
<li><a href="https://nuget.org/packages/Highway.Data.EntityFramework">Highway.Data.EntityFramework</a> is the package most people will use, and contains our full Entity Framework implementation.</li>
<li><a href="https://nuget.org/packages/Highway.Data.EntityFramework.Castle">Highway.Data.EntityFramework.Castle</a> contains a Windsor Installer already setup for everything Highway.Data needs other than your Repository, Context and Mappings.</li>
<li><a href="https://nuget.org/packages/Highway.Data">Highway.Data</a> is our core abstractions, without an ORM dependency.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Less Code - Theme Detection on Windows Phone 7]]></title>
    <link href="http://TimRayburn.net/blog/write-less-code-theme-detection-on-windows-phone-7/"/>
    <updated>2012-06-16T21:33:00-05:00</updated>
    <id>http://TimRayburn.net/blog/write-less-code-theme-detection-on-windows-phone-7</id>
    <content type="html"><![CDATA[<p>I spent alot of time tonight trying to find an elegant solution to the problem of detecting the light or dark theme from Windows Phone 7 and changing images based on those options.  I was people that were doing a ToString in the Foreground Brush, or writing custom methods for every image in their code-behind, and all of that felt  &#8230; dirty.  Finally I <a href="http://stackoverflow.com/questions/7198046/how-to-swap-images-based-on-the-current-theme-wp7">came across this solution on StackOverflow</a> which is not the &#8220;accepted&#8221; answer, but is the highest voted answer.  It was good enough to get me to post the answer here as well, so I can remember it, and hopefully some of you who might be working to hard can find a more elegant solution.</p>

<p>Liquid error: No such file or directory - python -c &#8220;import sys; print sys.executable&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pylon Solver for Windows Phone 7]]></title>
    <link href="http://TimRayburn.net/blog/pylon-solver-for-windows-phone-7/"/>
    <updated>2012-06-14T19:22:00-05:00</updated>
    <id>http://TimRayburn.net/blog/pylon-solver-for-windows-phone-7</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://TimRayburn.net/images/pylonsolver.png">
I&#8217;ve recently started developing for Windows Phone 7 because my apprentices have been very interested in the mobile space.  My first application is a utility used by players in <a href="http://swtor.com">Star Wars : The Old Republic</a> called <a href="http://windowsphone.com/s?appid=9b2a529d-8b02-4db7-a954-71677a50268b">Pylon Solver</a>.  The application is a solver for the Ancient Pylons puzzle in Eternity Vault.  But unlike so many of the apps out there, this one addresses a common problem, it is color-blind friendly.  Most of the solvers out there use just the colors, not the shapes, from the game.  This app uses both to provide a quick easy interface to solving the puzzle.  I&#8217;d appreciate any <a href="http://swtor.com">SWTOR</a> players out there downloading it, trying it out, and letting me know what they think, and leave a review.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join ScottGu for Meet Windows Azure]]></title>
    <link href="http://TimRayburn.net/blog/join-scottgu-for-meet-windows-azure/"/>
    <updated>2012-06-06T19:17:00-05:00</updated>
    <id>http://TimRayburn.net/blog/join-scottgu-for-meet-windows-azure</id>
    <content type="html"><![CDATA[<p>Just a quick note here, tomorrow (June 7th) Scott Guthrie will be hosting a live stream event called <a href="http://www.meetwindowsazure.com/">Meet Windows Azure</a>.  The event will start at 1PM PDT (2PM MDT, 3PM CDT, 4PM EDT) and it will be covering some amazing new features in Windows Azure.  In particular I&#8217;d like to draw your attention to this snippet, from their <a href="http://blogs.msdn.com/b/windowsazure/archive/2012/06/06/announcing-new-windows-azure-services-to-deliver-hybrid-cloud.aspx">announcement blog post</a> which should get your attention.</p>

<blockquote><p>Build web sites and applications with this highly elastic solution supporting .NET, Node.js, and PHP while using common deployment techniques like Git and FTP.  Windows Azure Web Sites will also allow easy deployment of open source applications like WordPress, Joomla!, DotNetNuke, Umbraco, and Drupal to the cloud with a few clicks.</p></blockquote>

<p>What&#8217;s that?  Quick and easy deployment from GIT to Azure?  You&#8217;ve got my attention.  But their not done yet, then they throw down:</p>

<blockquote><p>Windows Azure SDK June 2012 includes new developer capabilities for writing code against the latest service improvements with updated support for Java, PHP, and .NET, and the addition of Python as a supported language on Windows Azure.  Additionally, the SDK now provides 100% command line support for both Windows and Mac.</p></blockquote>

<p>Ok, where are the hidden cameras? 100% command line support for both Mac and Windows?!  Sign me up!</p>

<p>Join me tomorrow for <a href="http://www.meetwindowsazure.com/">Meet Windows Azure</a> and lets see what ScottGu has done to improve Azure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Bootcamp and Hackathon at Big (D) 2012]]></title>
    <link href="http://TimRayburn.net/blog/windows-phone-bootcamp-and-hackathon-at-big-d-2012/"/>
    <updated>2012-05-28T08:38:00-05:00</updated>
    <id>http://TimRayburn.net/blog/windows-phone-bootcamp-and-hackathon-at-big-d-2012</id>
    <content type="html"><![CDATA[<p>Want to learn what it takes to build a Windows Phone application?</p>

<p>The Windows Phone Bootcamp and Hackathon is a <strong>free</strong>, two-day event chock-full of everything you need to know to develop a Windows Phone application followed by an application building competition. Whether you</p>
]]></content>
  </entry>
  
</feed>
